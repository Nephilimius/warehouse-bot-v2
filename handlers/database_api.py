#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ threading
"""

import logging
from .utils import run_async_in_thread

logger = logging.getLogger(__name__)

class DatabaseAPI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ threading"""
    
    @staticmethod
    def is_admin(user_id):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–¥–º–∏–Ω–∞"""
        from config import ADMINS
        return user_id in ADMINS
    
    @staticmethod
    def get_or_create_user(user_id, username=None):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            from database import get_or_create_user
            return run_async_in_thread(get_or_create_user(user_id, username))
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ get_or_create_user: {e}")
            return None
    
    @staticmethod
    def get_all_users():
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            from database import get_all_users
            return run_async_in_thread(get_all_users())
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ get_all_users: {e}")
            return []
    
    @staticmethod
    def get_my_tasks(user_id):
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            from database import get_my_tasks
            return run_async_in_thread(get_my_tasks(user_id))
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ get_my_tasks: {e}")
            return []
    
    @staticmethod
    def get_pending_tasks(user_id=None):
        """–ü–æ–ª—É—á–∏—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–¥–∞—á–∏"""
        try:
            from database import get_pending_tasks
            return run_async_in_thread(get_pending_tasks(user_id))
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ get_pending_tasks: {e}")
            return []
    
    @staticmethod
    def get_completed_tasks(user_id=None):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
        try:
            from database import get_completed_tasks
            return run_async_in_thread(get_completed_tasks(user_id))
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ get_completed_tasks: {e}")
            return []
    
    @staticmethod
    def get_schedule_by_type(schedule_type):
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ —Ç–∏–ø—É"""
        try:
            from database import get_schedule_by_type
            return run_async_in_thread(get_schedule_by_type(schedule_type))
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ get_schedule_by_type: {e}")
            return []
    
    @staticmethod
    def create_schedule_task(user_id, task_type, date, time_slot, shelves=None):
        """–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"""
        try:
            from database import create_schedule_task
            return run_async_in_thread(create_schedule_task(user_id, task_type, date, time_slot, shelves))
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ create_schedule_task: {e}")
            return False, str(e)
    
    @staticmethod
    def delete_schedule_item(schedule_id, admin_id):
        """–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        try:
            from database import delete_schedule_item
            return run_async_in_thread(delete_schedule_item(schedule_id, admin_id))
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ delete_schedule_item: {e}")
            return False, str(e)
    
    # –ú–µ—Ç–æ–¥—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    @staticmethod
    def get_notification_settings(user_id):
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            from database import get_notification_settings
            return run_async_in_thread(get_notification_settings(user_id))
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ get_notification_settings: {e}")
            return None
    
    @staticmethod
    def get_user_notifications(user_id, limit=20):
        """–ü–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            from database import get_user_notifications
            return run_async_in_thread(get_user_notifications(user_id, limit))
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ get_user_notifications: {e}")
            return []
    
    @staticmethod
    def update_notification_settings(user_id, settings):
        """–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            from database import update_notification_settings
            return run_async_in_thread(update_notification_settings(user_id, settings))
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ update_notification_settings: {e}")
            return False
    
    @staticmethod
    def create_notification(user_id, title, message, notification_type="general"):
        """–°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        try:
            from database import create_notification
            return run_async_in_thread(create_notification(user_id, title, message, notification_type))
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ create_notification: {e}")
            return False
    
    @staticmethod
    def send_notification_to_all_users(title, message, role_filter=None):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        try:
            from .utils import TelegramAPI
            from config import TOKEN
            
            api = TelegramAPI(TOKEN)
            users = DatabaseAPI.get_all_users()
            sent_count = 0
            
            for user in users:
                # –§–∏–ª—å—Ç—Ä –ø–æ —Ä–æ–ª–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
                if role_filter and user.get('role') != role_filter:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                settings = DatabaseAPI.get_notification_settings(user['telegram_id'])
                if not settings or not settings.get('general_notifications', True):
                    continue
                
                # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ
                DatabaseAPI.create_notification(user['telegram_id'], title, message)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Telegram
                notification_text = f"üîî *{title}*\n\n{message}"
                success, result = api.send_message(user['telegram_id'], notification_text)
                if success:
                    sent_count += 1
            
            return sent_count
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ send_notification_to_all_users: {e}")
            return 0
    
    # –ú–µ—Ç–æ–¥—ã –æ—Ç—á–µ—Ç–æ–≤
    @staticmethod
    def get_quality_report():
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ –∫–∞—á–µ—Å—Ç–≤—É —Ä–∞–±–æ—Ç—ã"""
        try:
            from database import get_quality_report
            return run_async_in_thread(get_quality_report())
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ get_quality_report: {e}")
            return None
    
    @staticmethod
    def get_time_report():
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        try:
            from database import get_time_report
            return run_async_in_thread(get_time_report())
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ get_time_report: {e}")
            return None
    
    @staticmethod
    def get_tasks_report():
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ —Ç–∏–ø–∞–º –∑–∞–¥–∞—á"""
        try:
            from database import get_tasks_report
            return run_async_in_thread(get_tasks_report())
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ get_tasks_report: {e}")
            return None
    
    @staticmethod
    def get_general_report():
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        try:
            from database import get_general_report
            return run_async_in_thread(get_general_report())
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ get_general_report: {e}")
            return None
