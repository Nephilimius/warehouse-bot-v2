#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
handlers/task_handlers.py
–•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏
"""

import logging
from .utils import TelegramAPI, get_task_type_emoji, is_admin
import database as db
from .keyboards import get_tasks_menu

logger = logging.getLogger(__name__)


def handle_tasks_menu_text(user_id, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –∑–∞–¥–∞–Ω–∏–π —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç"""
    is_admin_user = is_admin(user_id)
    return api.send_message(
        user_id,
        "üìÑ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_tasks_menu(is_admin_user),
        parse_mode='Markdown'
    )


def handle_tasks_menu_callback(user_id, message_id, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –∑–∞–¥–∞–Ω–∏–π —á–µ—Ä–µ–∑ callback"""
    is_admin_user = is_admin(user_id)
    return api.edit_message(
        user_id,
        message_id,
        "üìÑ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_tasks_menu(is_admin_user),
        parse_mode='Markdown'
    )


def handle_my_tasks(user_id, message_id, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–æ–∏—Ö –∑–∞–¥–∞—á"""
    tasks = db.get_my_tasks(user_id)
    if tasks:
        message = "üìù *–í–∞—à–∏ –∑–∞–¥–∞–Ω–∏—è* (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)\n\n"
        for i, task in enumerate(tasks[:10]):
            type_emoji = get_task_type_emoji(task.get('type', ''))
            status = task.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            status_emoji = {"–í—ã–ø–æ–ª–Ω–µ–Ω–æ": "‚úÖ", "–û–∂–∏–¥–∞—é—â–µ–µ": "‚è≥", "–í —Ä–∞–±–æ—Ç–µ": "üîÑ"}.get(status, "üìã")
            
            message += f"{i+1}. {status_emoji} *{task.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}* ({status.lower()})\n"
            message += f"   üìÖ {task.get('when_', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')[:16]}\n"
            if task.get('rating') and task.get('rating') > 0:
                message += f"   –û—Ü–µ–Ω–∫–∞: {'‚≠ê' * task['rating']} ({task['rating']}/5)\n"
            message += "\n"
    else:
        message = "üìù *–í–∞—à–∏ –∑–∞–¥–∞–Ω–∏—è*\n\n‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π."
    
    return api.edit_message(user_id, message_id, message, reply_markup={'inline_keyboard': [[{'text': '‚óÄÔ∏è –ö –∑–∞–¥–∞–Ω–∏—è–º', 'callback_data': 'tasks'}]]}, parse_mode='Markdown')


def handle_pending_tasks(user_id, message_id, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–¥–∞—á"""
    is_admin_user = is_admin(user_id)
    tasks = db.get_pending_tasks(user_id=None if is_admin_user else user_id)
    title = "‚è≥ *–í—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–¥–∞–Ω–∏—è*" if is_admin_user else "‚è≥ *–í–∞—à–∏ –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–¥–∞–Ω–∏—è*"

    if tasks:
        message = f"{title} ({len(tasks)})\n\n"
        for i, task in enumerate(tasks[:10]):
            type_emoji = get_task_type_emoji(task.get('type', ''))
            message += f"{i+1}. {type_emoji} *{task.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}*\n"
            if is_admin_user and task.get('username'):
                message += f"   üë§ @{task['username']}\n"
            message += f"   üìÖ {task.get('when_', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')[:16]}\n"
        if len(tasks) > 10: message += f"\n... –∏ –µ—â–µ {len(tasks) - 10} –∑–∞–¥–∞–Ω–∏–π."
    else:
        message = f"{title}\n\n‚úÖ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–¥–∞–Ω–∏–π."
    
    return api.edit_message(user_id, message_id, message, reply_markup={'inline_keyboard': [[{'text': '‚óÄÔ∏è –ö –∑–∞–¥–∞–Ω–∏—è–º', 'callback_data': 'tasks'}]]}, parse_mode='Markdown')


def handle_completed_tasks(user_id, message_id, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
    is_admin_user = is_admin(user_id)
    tasks = db.get_completed_tasks(user_id=None if is_admin_user else user_id)
    title = "‚úÖ *–í—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è*" if is_admin_user else "‚úÖ *–í–∞—à–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è*"
    
    if tasks:
        message = f"{title} ({len(tasks)})\n\n"
        for i, task in enumerate(tasks[:10]):
            type_emoji = get_task_type_emoji(task.get('type', ''))
            message += f"{i+1}. {type_emoji} *{task.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}*\n"
            if is_admin_user and task.get('username'):
                message += f"   üë§ @{task['username']}\n"
            if task.get('rating') and task.get('rating') > 0:
                message += f"   –û—Ü–µ–Ω–∫–∞: {'‚≠ê' * task['rating']}\n"
        if len(tasks) > 10: message += f"\n... –∏ –µ—â–µ {len(tasks) - 10} –∑–∞–¥–∞–Ω–∏–π."
    else:
        message = f"{title}\n\n‚ùå –ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π."
    
    return api.edit_message(user_id, message_id, message, reply_markup={'inline_keyboard': [[{'text': '‚óÄÔ∏è –ö –∑–∞–¥–∞–Ω–∏—è–º', 'callback_data': 'tasks'}]]}, parse_mode='Markdown')


def handle_all_stats(user_id, message_id, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–¥–∞–Ω–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if not is_admin(user_id): return api.edit_message(user_id, message_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
    stats = db.get_all_tasks_stats()
    
    if not stats:
        message = "üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞–Ω–∏–π*\n\n‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
    else:
        message = "üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞–Ω–∏–π*\n\n"
        for task_type, type_stats in stats.items():
            message += f"{get_task_type_emoji(task_type)} *{task_type}*\n"
            for status, s_data in type_stats.items():
                 message += f"   - {status}: {s_data.get('count', 0)}\n"
            message += "\n"

    return api.edit_message(user_id, message_id, message, reply_markup={'inline_keyboard': [[{'text': '‚óÄÔ∏è –ö –∑–∞–¥–∞–Ω–∏—è–º', 'callback_data': 'tasks'}]]}, parse_mode='Markdown')


def handle_task_callback(user_id, message_id, query_id, callback_data, api: TelegramAPI):
    """–†–æ—É—Ç–µ—Ä –¥–ª—è callback'–æ–≤ –∑–∞–¥–∞—á"""
    api.answer_callback_query(query_id)

    if callback_data == 'tasks_my':
        return handle_my_tasks(user_id, message_id, api)
    
    elif callback_data == 'tasks_pending':
        return handle_pending_tasks(user_id, message_id, api)
    
    elif callback_data == 'tasks_completed':
        return handle_completed_tasks(user_id, message_id, api)
    
    elif callback_data == 'tasks_stats_all':
        return handle_all_stats(user_id, message_id, api)
    
    # –ï—Å–ª–∏ –º—ã –∑–¥–µ—Å—å, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ 'tasks' - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞
    return handle_tasks_menu_callback(user_id, message_id, api)
