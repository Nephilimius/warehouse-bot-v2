#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
handlers/task_handlers.py
–•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏
"""

import logging
from .utils import TelegramAPI, get_task_type_emoji
from .database_api import db
from .keyboards import get_tasks_menu, get_back_button

logger = logging.getLogger(__name__)


def handle_tasks_menu_text(user_id, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –∑–∞–¥–∞–Ω–∏–π —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç"""
    
    is_admin = db.is_admin(user_id)
    
    return api.send_message(
        user_id,
        """üìÑ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏*

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:""",
        reply_markup=get_tasks_menu(is_admin),
        parse_mode='Markdown'
    )


def handle_tasks_menu_callback(user_id, message_id, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –∑–∞–¥–∞–Ω–∏–π —á–µ—Ä–µ–∑ callback"""
    
    is_admin = db.is_admin(user_id)
    
    return api.edit_message(
        user_id,
        message_id,
        "üìÑ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_tasks_menu(is_admin)
    )


def handle_my_tasks(user_id, message_id, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–æ–∏—Ö –∑–∞–¥–∞—á"""
    
    tasks = db.get_my_tasks(user_id)
    
    if tasks:
        message = "üìù *–í–∞—à–∏ –∑–∞–¥–∞–Ω–∏—è* (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)\n\n"
        
        for i, task in enumerate(tasks[:10]):
            type_emoji = get_task_type_emoji(task.get('type', ''))
            
            message += f"{i+1}. {type_emoji} *{task.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}*\n"
            message += f"üìÖ {task.get('when_', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')[:16]}\n"
            
            if task.get('description'):
                desc = task['description'][:50] + "..." if len(task['description']) > 50 else task['description']
                message += f"üìù {desc}\n"
            
            status = task.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            status_emoji = {"–í—ã–ø–æ–ª–Ω–µ–Ω–æ": "‚úÖ", "–û–∂–∏–¥–∞—é—â–µ–µ": "‚è≥", "–í —Ä–∞–±–æ—Ç–µ": "üîÑ"}.get(status, "üìã")
            message += f"{status_emoji} {status}\n"
            
            if task.get('rating'):
                stars = "‚≠ê" * task['rating']
                message += f"{stars} ({task['rating']}/5)\n"
            
            message += "\n"
    else:
        message = "üìù *–í–∞—à–∏ –∑–∞–¥–∞–Ω–∏—è*\n\n‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π"
    
    return api.edit_message(
        user_id,
        message_id,
        message,
        reply_markup={'inline_keyboard': [[{'text': '‚óÄÔ∏è –ö –∑–∞–¥–∞–Ω–∏—è–º', 'callback_data': 'tasks'}]]},
        parse_mode='Markdown'
    )


def handle_pending_tasks(user_id, message_id, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–¥–∞—á"""
    
    is_admin = db.is_admin(user_id)
    
    if is_admin:
        tasks = db.get_pending_tasks()  # –í—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ
        title = "‚è≥ *–í—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–¥–∞–Ω–∏—è*"
    else:
        tasks = db.get_pending_tasks(user_id)  # –¢–æ–ª—å–∫–æ —Å–≤–æ–∏
        title = "‚è≥ *–í–∞—à–∏ –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–¥–∞–Ω–∏—è*"
    
    if tasks:
        message = f"{title}\n\n"
        
        for i, task in enumerate(tasks[:10]):
            type_emoji = get_task_type_emoji(task.get('type', ''))
            
            message += f"{i+1}. {type_emoji} *{task.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}*\n"
            message += f"üìÖ {task.get('when_', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')[:16]}\n"
            
            if is_admin and task.get('username'):
                message += f"üë§ @{task['username']}\n"
            
            if task.get('description'):
                desc = task['description'][:50] + "..." if len(task['description']) > 50 else task['description']
                message += f"üìù {desc}\n"
            
            message += "\n"
        
        if len(tasks) > 10:
            message += f"... –∏ –µ—â–µ {len(tasks) - 10} –∑–∞–¥–∞–Ω–∏–π"
    else:
        message = f"{title}\n\n‚úÖ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–¥–∞–Ω–∏–π"
    
    return api.edit_message(
        user_id,
        message_id,
        message,
        reply_markup={'inline_keyboard': [[{'text': '‚óÄÔ∏è –ö –∑–∞–¥–∞–Ω–∏—è–º', 'callback_data': 'tasks'}]]},
        parse_mode='Markdown'
    )


def handle_completed_tasks(user_id, message_id, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
    
    is_admin = db.is_admin(user_id)
    
    if is_admin:
        tasks = db.get_completed_tasks()  # –í—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
        title = "‚úÖ *–í—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è*"
    else:
        tasks = db.get_completed_tasks(user_id)  # –¢–æ–ª—å–∫–æ —Å–≤–æ–∏
        title = "‚úÖ *–í–∞—à–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è*"
    
    if tasks:
        message = f"{title}\n\n"
        
        for i, task in enumerate(tasks[:10]):
            type_emoji = get_task_type_emoji(task.get('type', ''))
            
            message += f"{i+1}. {type_emoji} *{task.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}*\n"
            message += f"üìÖ {task.get('when_', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')[:16]}\n"
            
            if is_admin and task.get('username'):
                message += f"üë§ @{task['username']}\n"
            
            if task.get('description'):
                desc = task['description'][:50] + "..." if len(task['description']) > 50 else task['description']
                message += f"üìù {desc}\n"
            
            if task.get('rating'):
                stars = "‚≠ê" * task['rating']
                message += f"–û—Ü–µ–Ω–∫–∞: {stars} ({task['rating']}/5)\n"
            
            if task.get('time_spent'):
                message += f"‚è±Ô∏è –í—Ä–µ–º—è: {task['time_spent']} –º–∏–Ω\n"
            
            message += "\n"
        
        if len(tasks) > 10:
            message += f"... –∏ –µ—â–µ {len(tasks) - 10} –∑–∞–¥–∞–Ω–∏–π"
    else:
        message = f"{title}\n\n‚ùå –ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π"
    
    return api.edit_message(
        user_id,
        message_id,
        message,
        reply_markup={'inline_keyboard': [[{'text': '‚óÄÔ∏è –ö –∑–∞–¥–∞–Ω–∏—è–º', 'callback_data': 'tasks'}]]},
        parse_mode='Markdown'
    )


def handle_all_stats(user_id, message_id, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–¥–∞–Ω–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    
    if not db.is_admin(user_id):
        return api.edit_message(
            user_id,
            message_id,
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"
        )
    
    all_pending = db.get_pending_tasks()
    all_completed = db.get_completed_tasks()
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
    pending_by_type = {}
    completed_by_type = {}
    
    for task in all_pending:
        task_type = task.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        pending_by_type[task_type] = pending_by_type.get(task_type, 0) + 1
    
    for task in all_completed:
        task_type = task.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        completed_by_type[task_type] = completed_by_type.get(task_type, 0) + 1
    
    message = "üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞–Ω–∏–π*\n\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
    all_types = set(list(pending_by_type.keys()) + list(completed_by_type.keys()))
    
    for task_type in all_types:
        type_emoji = get_task_type_emoji(task_type)
        pending_count = pending_by_type.get(task_type, 0)
        completed_count = completed_by_type.get(task_type, 0)
        total = pending_count + completed_count
        
        message += f"{type_emoji} *{task_type}*\n"
        message += f"   ‚è≥ –û–∂–∏–¥–∞—é—â–∏—Ö: {pending_count}\n"
        message += f"   ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö: {completed_count}\n"
        message += f"   üìä –í—Å–µ–≥–æ: {total}\n\n"
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_pending = len(all_pending)
    total_completed = len(all_completed)
    total_all = total_pending + total_completed
    
    message += f"üìà *–û–±—â–∏–µ –∏—Ç–æ–≥–∏:*\n"
    message += f"‚è≥ –û–∂–∏–¥–∞—é—â–∏—Ö: {total_pending}\n"
    message += f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö: {total_completed}\n"
    message += f"üìä –í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–∏–π: {total_all}"
    
    return api.edit_message(
        user_id,
        message_id,
        message,
        reply_markup={'inline_keyboard': [[{'text': '‚óÄÔ∏è –ö –∑–∞–¥–∞–Ω–∏—è–º', 'callback_data': 'tasks'}]]},
        parse_mode='Markdown'
    )


def handle_task_callback(user_id, message_id, callback_data, api: TelegramAPI):
    """–†–æ—É—Ç–µ—Ä –¥–ª—è callback'–æ–≤ –∑–∞–¥–∞—á"""
    
    if callback_data == 'tasks':
        return handle_tasks_menu_callback(user_id, message_id, api)
    
    elif callback_data == 'my_tasks':
        return handle_my_tasks(user_id, message_id, api)
    
    elif callback_data == 'pending_tasks':
        return handle_pending_tasks(user_id, message_id, api)
    
    elif callback_data == 'completed_tasks':
        return handle_completed_tasks(user_id, message_id, api)
    
    elif callback_data == 'all_stats':
        return handle_all_stats(user_id, message_id, api)
    
    else:
        return api.edit_message(
            user_id,
            message_id,
            f"‚ùì –§—É–Ω–∫—Ü–∏—è `{callback_data}` –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
            reply_markup={'inline_keyboard': [[{'text': '‚óÄÔ∏è –ö –∑–∞–¥–∞–Ω–∏—è–º', 'callback_data': 'tasks'}]]}
        )