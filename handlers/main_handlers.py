#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
handlers/main_handlers.py
–û—Å–Ω–æ–≤–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥ –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
"""

import logging
from .utils import TelegramAPI
from .database_api import DatabaseAPI
from .keyboards import get_main_menu_keyboard, get_reply_keyboard, get_back_button

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}
user_data = {}


def handle_start_command(user_id, username, first_name, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    
    user_states[user_id] = 'main'
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
    user = DatabaseAPI.get_or_create_user(user_id, username)
    role = user.get('role', '–ö–ª–∞–¥–æ–≤—â–∏–∫') if user else '–ö–ª–∞–¥–æ–≤—â–∏–∫'
    is_admin = DatabaseAPI.is_admin(user_id)
    
    welcome_text = f"""ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {first_name}!*

*–í–∞—à–∞ —Ä–æ–ª—å:* {role}
{'üëë –£ –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!' if is_admin else ''}

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"""
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤–Ω–∏–∑—É
    return api.send_message(
        user_id,
        welcome_text,
        reply_markup=get_reply_keyboard(is_admin)
    )


def handle_cancel_command(user_id, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /cancel"""
    
    user_states[user_id] = 'main'
    is_admin = DatabaseAPI.is_admin(user_id)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if user_id in user_data and 'creating_schedule' in user_data[user_id]:
        del user_data[user_id]['creating_schedule']
    
    return api.send_message(
        user_id,
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ.",
        reply_markup=get_reply_keyboard(is_admin)
    )


def handle_search_text(user_id, text, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    user_states[user_id] = 'main'
    
    # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
    username = text.replace("@", "")
    
    # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
    users = DatabaseAPI.get_all_users()
    found_user = None
    
    for user in users:
        if user.get('username', '').lower() == username.lower():
            found_user = user
            break
    
    if found_user:
        from .utils import get_role_emoji
        
        role_emoji = get_role_emoji(found_user['role'])
        
        message = f"""üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞*

üë§ *@{found_user['username']}*
{role_emoji} –†–æ–ª—å: {found_user['role']}
üìã –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {found_user.get('tasks_count', 0)}
‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {found_user.get('average_rating', 0):.1f}
üÜî ID: {found_user['telegram_id']}"""
    else:
        message = f"üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞*\n\n‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `@{username}` –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    is_admin = DatabaseAPI.is_admin(user_id)
    return api.send_message(
        user_id,
        message,
        reply_markup=get_main_menu_keyboard(is_admin)
    )


def handle_profile_text(user_id, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç"""
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
    user = DatabaseAPI.get_or_create_user(user_id)
    
    if user:
        is_admin = DatabaseAPI.is_admin(user_id)
        admin_status = "\nüëë *–°—Ç–∞—Ç—É—Å:* –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if is_admin else ""
        
        message = f"""üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*

üì± *Username:* @{user.get('username', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üé≠ *–†–æ–ª—å:* {user.get('role', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}{admin_status}
üìã *–ó–∞–¥–∞–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:* {user.get('tasks_count', 0)}
‚≠ê *–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥:* {user.get('average_rating', 0):.1f}
üíé *–ö–∞—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã:* {user.get('quality_score', 0):.1f}
üÜî *ID:* {user_id}"""
    else:
        message = f"""üë§ *–ü—Ä–æ—Ñ–∏–ª—å*

‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
üÜî *ID:* {user_id}"""
    
    return api.send_message(
        user_id,
        message,
        reply_markup=get_back_button(),
        parse_mode='Markdown'
    )


def handle_text_message(user_id, username, text, api: TelegramAPI):
    """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    is_admin = DatabaseAPI.is_admin(user_id)
    
    # –ö–æ–º–∞–Ω–¥—ã
    if text == "/start":
        return handle_start_command(user_id, username, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", api)
    
    elif text == "/cancel":
        return handle_cancel_command(user_id, api)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    elif 'üîç –ù–∞–π—Ç–∏' in text or text == '–ù–∞–π—Ç–∏':
        user_states[user_id] = 'search'
        return api.send_message(
            user_id,
            """üîç *–ü–æ–∏—Å–∫ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*

–í–≤–µ–¥–∏—Ç–µ username –¥–ª—è –ø–æ–∏—Å–∫–∞:""",
            parse_mode='Markdown'
        )
    
    elif 'üìÑ –ó–∞–¥–∞–Ω–∏—è' in text or text == '–ó–∞–¥–∞–Ω–∏—è':
        from .task_handlers import handle_tasks_menu_text
        return handle_tasks_menu_text(user_id, api)
    
    elif 'üóìÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ' in text or text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
        from .shedule_handlers import handle_schedule_menu_text
        return handle_schedule_menu_text(user_id, api)
    
    elif 'üìä –û—Ç—á–µ—Ç—ã' in text or text == '–û—Ç—á–µ—Ç—ã':
        from .report_handlers import handle_reports_menu_text
        return handle_reports_menu_text(user_id, api)
    
    elif 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' in text or text == '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è':
        from .notification_handlers import handle_notifications_menu_text
        return handle_notifications_menu_text(user_id, api)
    
    elif 'üë§ –ü—Ä–æ—Ñ–∏–ª—å' in text or text == '–ü—Ä–æ—Ñ–∏–ª—å':
        return handle_profile_text(user_id, api)
    
    elif 'üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è' in text or text == '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è':
        if is_admin:
            from .admin_handlers import handle_admin_menu_text
            return handle_admin_menu_text(user_id, api)
        else:
            return api.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    current_state = user_states.get(user_id, 'main')
    
    if current_state == 'search':
        return handle_search_text(user_id, text, api)
    
    elif current_state == 'admin_send_notification_all':
        from .notification_handlers import handle_send_notification_all_text
        return handle_send_notification_all_text(user_id, text, api)
    
    elif current_state.startswith('admin_send_notification_role_'):
        from .notification_handlers import handle_send_notification_role_text
        return handle_send_notification_role_text(user_id, text, current_state, api)
    
    elif current_state == 'admin_schedule_input_date':
        from .shedule_handlers import handle_schedule_date_input
        return handle_schedule_date_input(user_id, text, api)
    
    elif current_state == 'admin_schedule_input_time':
        from .shedule_handlers import handle_schedule_time_input
        return handle_schedule_time_input(user_id, text, api)
    
    elif current_state == 'admin_schedule_input_details':
        from .shedule_handlers import handle_schedule_details_input
        return handle_schedule_details_input(user_id, text, api)
    
    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –ø–æ–¥—Å–∫–∞–∑–∫–∞
    return api.send_message(
        user_id,
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é"""
    )


def get_user_states():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    return user_states


def get_user_data():
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    return user_data


def set_user_state(user_id, state):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_states[user_id] = state


def get_user_state(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return user_states.get(user_id, 'main')


def set_user_data(user_id, key, value):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_data:
        user_data[user_id] = {}
    user_data[user_id][key] = value


def get_user_data_value(user_id, key, default=None):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return user_data.get(user_id, {}).get(key, default)


def clear_user_data(user_id, key):
    """–û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id in user_data and key in user_data[user_id]:
        del user_data[user_id][key]