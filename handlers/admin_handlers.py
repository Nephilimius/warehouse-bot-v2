#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
handlers/admin_handlers.py
–•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
"""

import logging
from .utils import TelegramAPI, get_role_emoji, get_task_type_emoji
import database as db
from .keyboards import get_admin_menu, get_admin_schedule_menu

logger = logging.getLogger(__name__)


def handle_admin_menu_text(user_id, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –º–µ–Ω—é —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç"""
    return api.send_message(
        user_id,
        "üëë *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_menu(),
        parse_mode='Markdown'
    )


def handle_admin_menu_callback(user_id, message_id, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –º–µ–Ω—é —á–µ—Ä–µ–∑ callback"""
    return api.edit_message(
        user_id,
        message_id,
        "üëë *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_menu(),
        parse_mode='Markdown'
    )


def handle_admin_users(user_id, message_id, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    users = db.get_all_users()
    if users:
        message = f"üë• *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π* ({len(users)})\n\n"
        for i, user in enumerate(users[:10]):
            role_emoji = get_role_emoji(user['role'])
            message += f"{i+1}. {role_emoji} @{user['username']} - {user['role']}\n"
            message += f"   üìã –ó–∞–¥–∞—á: {user.get('tasks_count', 0)}, ‚≠ê {user.get('average_rating', 0.0):.1f}\n\n"
        if len(users) > 10:
            message += f"... –∏ –µ—â–µ {len(users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
    else:
        message = "üë• *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
    
    return api.edit_message(
        user_id, message_id, message,
        reply_markup={'inline_keyboard': [[{'text': '‚óÄÔ∏è –ö –∞–¥–º–∏–Ω–∫–µ', 'callback_data': 'admin'}]]},
        parse_mode='Markdown'
    )


def handle_admin_stats(user_id, message_id, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    stats = db.get_system_stats()
    message = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã*\n\n"
    if stats:
        message += "üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n"
        for role, count in stats.get('users', {}).items():
            message += f"   {get_role_emoji(role)} {role}: {count}\n"
        
        message += "\nüìã *–ó–∞–¥–∞–Ω–∏—è:*\n"
        for status, count in stats.get('tasks', {}).items():
            message += f"   {status}: {count}\n"
    else:
        message += "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."

    return api.edit_message(
        user_id, message_id, message,
        reply_markup={'inline_keyboard': [[{'text': '‚óÄÔ∏è –ö –∞–¥–º–∏–Ω–∫–µ', 'callback_data': 'admin'}]]},
        parse_mode='Markdown'
    )


def handle_admin_schedule_menu(user_id, message_id, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –º–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    return api.edit_message(
        user_id, message_id,
        "üóìÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_schedule_menu(),
        parse_mode='Markdown'
    )

def handle_admin_schedule_view_all(user_id, message_id, api: TelegramAPI):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    all_items = db.get_all_schedule_items()
    if not all_items:
        message = "üëÄ *–í—Å–µ –∑–∞–ø–∏—Å–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è*\n\n‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏."
    else:
        message = f"üëÄ *–í—Å–µ –∑–∞–ø–∏—Å–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è* ({len(all_items)})\n\n"
        for i, item in enumerate(all_items[:10]):
            emoji = get_task_type_emoji(item['type'])
            time_str = f"{item['start_time']}-{item['end_time']}"
            if time_str == "00:00-23:59": time_str = "–í–µ—Å—å –¥–µ–Ω—å"
            message += f"{i+1}. {emoji} *{item['type']}* –Ω–∞ {item['date']}\n"
            message += f"   @{item['username']} ({time_str})\n"
        if len(all_items) > 10:
            message += f"\n... –∏ –µ—â–µ {len(all_items) - 10} –∑–∞–ø–∏—Å–µ–π."
            
    return api.edit_message(
        user_id, message_id, message,
        reply_markup={'inline_keyboard': [[{'text': '‚óÄÔ∏è –ö —É–ø—Ä. —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º', 'callback_data': 'admin_schedule'}]]},
        parse_mode='Markdown'
    )

def handle_admin_schedule_add(user_id, message_id, api: TelegramAPI):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"""
    keyboard = [
        [{'text': 'üçΩÔ∏è –û–±–µ–¥—ã', 'callback_data': 'admin_schedule_add_–û–±–µ–¥—ã'}],
        [{'text': 'üßπ –£–±–æ—Ä–∫–∞', 'callback_data': 'admin_schedule_add_–£–±–æ—Ä–∫–∞'}],
        [{'text': 'üî¢ –ü–µ—Ä–µ—Å—á–µ—Ç—ã', 'callback_data': 'admin_schedule_add_–ü–µ—Ä–µ—Å—á–µ—Ç—ã'}],
        [{'text': '‚óÄÔ∏è –ù–∞–∑–∞–¥', 'callback_data': 'admin_schedule'}]
    ]
    return api.edit_message(
        user_id, message_id,
        "üü¢ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è:",
        reply_markup={'inline_keyboard': keyboard},
        parse_mode='Markdown'
    )

def handle_admin_callback(user_id, message_id, query_id, callback_data, api: TelegramAPI):
    """–†–æ—É—Ç–µ—Ä –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö callback'–æ–≤"""
    api.answer_callback_query(query_id)

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏
    if callback_data == 'admin':
        return handle_admin_menu_callback(user_id, message_id, api)
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    elif callback_data == 'admin_users':
        return handle_admin_users(user_id, message_id, api)
    elif callback_data == 'admin_stats':
        return handle_admin_stats(user_id, message_id, api)
        
    # –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
    elif callback_data == 'admin_schedule':
        return handle_admin_schedule_menu(user_id, message_id, api)
    elif callback_data == 'admin_schedule_view_all':
        return handle_admin_schedule_view_all(user_id, message_id, api)
    elif callback_data == 'admin_schedule_add':
        return handle_admin_schedule_add(user_id, message_id, api)

    # –ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
    elif callback_data.startswith('admin_schedule_add_'):
        task_type = callback_data.replace('admin_schedule_add_', '')
        db.set_user_state(user_id, 'admin_schedule_select_user', {'creating_schedule': {'type': task_type}})
        
        users = db.get_all_users()
        if not users: return api.edit_message(user_id, message_id, "‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        keyboard = [[{'text': f"{get_role_emoji(u.get('role', ''))} @{u['username']}", 'callback_data': f"admin_schedule_select_{u['telegram_id']}"}] for u in users[:15]]
        keyboard.append([{'text': '‚ùå –û—Ç–º–µ–Ω–∞', 'callback_data': 'admin_schedule'}])
        
        return api.edit_message(user_id, message_id, f"üë• *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ: {task_type}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:", reply_markup={'inline_keyboard': keyboard}, parse_mode='Markdown')

    elif callback_data.startswith('admin_schedule_select_'):
        state, data = db.get_user_state(user_id)
        if not state.startswith('admin_schedule_'): return api.edit_message(user_id, message_id, "‚ùå –ò—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è")

        selected_user_id = callback_data.replace('admin_schedule_select_', '')
        data['creating_schedule']['assigned_to'] = selected_user_id
        
        users = db.get_all_users()
        selected_user = next((u for u in users if str(u['telegram_id']) == str(selected_user_id)), None)
        if not selected_user: return api.edit_message(user_id, message_id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

        data['creating_schedule']['assigned_username'] = selected_user['username']
        db.set_user_state(user_id, 'admin_schedule_input_date', data)
        
        return api.edit_message(user_id, message_id, f"üìÖ *–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è*\n\n–ó–∞–¥–∞–Ω–∏–µ: {data['creating_schedule']['type']}\n–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: @{selected_user['username']}\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, `—Å–µ–≥–æ–¥–Ω—è`, `–∑–∞–≤—Ç—Ä–∞`, `31.12`):", parse_mode='Markdown')
