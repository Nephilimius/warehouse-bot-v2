#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
handlers/admin_handlers.py
–•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
"""

import logging
from .utils import TelegramAPI, get_role_emoji, get_task_type_emoji
from .database_api import DatabaseAPI
from .keyboards import get_admin_menu, get_admin_schedule_menu
from .main_handlers import set_user_state, get_user_data, set_user_data

logger = logging.getLogger(__name__)


def handle_admin_menu_text(user_id, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –º–µ–Ω—é —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç"""
    
    return api.send_message(
        user_id,
        """üëë *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:""",
        reply_markup=get_admin_menu(),
        parse_mode='Markdown'
    )


def handle_admin_menu_callback(user_id, message_id, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –º–µ–Ω—é —á–µ—Ä–µ–∑ callback"""
    
    return api.edit_message(
        user_id,
        message_id,
        "üëë *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_menu()
    )


def handle_admin_users(user_id, message_id, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    users = DatabaseAPI.get_all_users()
    
    if users:
        message = f"üë• *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π* ({len(users)})\n\n"
        
        for i, user in enumerate(users[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 10
            role_emoji = get_role_emoji(user['role'])
            message += f"{i+1}. {role_emoji} @{user['username']} - {user['role']}\n"
            message += f"   üìã –ó–∞–¥–∞—á: {user['tasks_count']}, ‚≠ê {user['average_rating']:.1f}\n\n"
        
        if len(users) > 10:
            message += f"... –∏ –µ—â–µ {len(users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    else:
        message = "üë• *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    
    return api.edit_message(
        user_id,
        message_id,
        message,
        reply_markup={'inline_keyboard': [[{'text': '‚óÄÔ∏è –ö –∞–¥–º–∏–Ω–∫–µ', 'callback_data': 'admin'}]]},
        parse_mode='Markdown'
    )


def handle_admin_stats(user_id, message_id, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    
    users = DatabaseAPI.get_all_users()
    pending_tasks = DatabaseAPI.get_pending_tasks()
    completed_tasks = DatabaseAPI.get_completed_tasks()
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–æ–ª—è–º
    role_stats = {}
    for user in users:
        role = user.get('role', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        role_stats[role] = role_stats.get(role, 0) + 1
    
    message = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã*\n\n"
    message += f"üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n"
    for role, count in role_stats.items():
        role_emoji = get_role_emoji(role)
        message += f"{role_emoji} {role}: {count}\n"
    
    message += f"\nüìã *–ó–∞–¥–∞–Ω–∏—è:*\n"
    message += f"‚è≥ –û–∂–∏–¥–∞—é—â–∏—Ö: {len(pending_tasks)}\n"
    message += f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö: {len(completed_tasks)}\n"
    message += f"üìä –í—Å–µ–≥–æ: {len(pending_tasks) + len(completed_tasks)}"
    
    return api.edit_message(
        user_id,
        message_id,
        message,
        reply_markup={'inline_keyboard': [[{'text': '‚óÄÔ∏è –ö –∞–¥–º–∏–Ω–∫–µ', 'callback_data': 'admin'}]]},
        parse_mode='Markdown'
    )


def handle_admin_schedule_menu(user_id, message_id, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –º–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    
    return api.edit_message(
        user_id,
        message_id,
        "üóìÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_schedule_menu(),
        parse_mode='Markdown'
    )


def handle_admin_schedule_view_all(user_id, message_id, api: TelegramAPI):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    
    message = "üëÄ *–í—Å–µ –∑–∞–ø–∏—Å–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è*\n\n"
    total = 0
    all_items = []
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
    for stype in ['–û–±–µ–¥—ã', '–£–±–æ—Ä–∫–∞', '–ü–µ—Ä–µ—Å—á–µ—Ç—ã']:
        items = DatabaseAPI.get_schedule_by_type(stype)
        if items:
            for item in items:
                item['type'] = stype
                all_items.append(item)
            total += len(items)
    
    if total == 0:
        message += "‚ùå –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"
    else:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
        all_items.sort(key=lambda x: x.get('date', ''))
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ (–ø–µ—Ä–≤—ã–µ 10 –∑–∞–ø–∏—Å–µ–π)
        for i, item in enumerate(all_items[:10]):
            emoji = get_task_type_emoji(item['type'])
            time_str = f"{item['start_time']}-{item['end_time']}"
            if time_str == "00:00-23:59":
                time_str = "–í–µ—Å—å –¥–µ–Ω—å"
            
            message += f"{i+1}. {emoji} *{item['type']}*\n"
            message += f"   üìÖ {item['date']} {time_str}\n"
            message += f"   üë§ @{item['username']}\n"
            if 'id' in item:
                message += f"   üÜî {item['id'][:8]}...\n"
            message += "\n"
        
        if len(all_items) > 10:
            message += f"... –∏ –µ—â–µ {len(all_items) - 10} –∑–∞–ø–∏—Å–µ–π\n"
        
        message += f"\nüìä *–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π:* {total}"
    
    return api.edit_message(
        user_id, message_id, message,
        reply_markup=get_admin_schedule_menu(),
        parse_mode='Markdown'
    )


def handle_admin_schedule_add(user_id, message_id, api: TelegramAPI):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"""
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –∑–∞–ø–∏—Å–∏
    keyboard = [
        [{'text': 'üçΩÔ∏è –î–æ–±–∞–≤–∏—Ç—å –æ–±–µ–¥', 'callback_data': 'admin_add_meals'}],
        [{'text': 'üßπ –î–æ–±–∞–≤–∏—Ç—å —É–±–æ—Ä–∫—É', 'callback_data': 'admin_add_cleaning'}],
        [{'text': 'üî¢ –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ—Å—á–µ—Ç', 'callback_data': 'admin_add_counting'}],
        [{'text': '‚óÄÔ∏è –ù–∞–∑–∞–¥', 'callback_data': 'admin_schedule'}]
    ]
    
    return api.edit_message(
        user_id, message_id,
        "üü¢ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è:",
        reply_markup={'inline_keyboard': keyboard},
        parse_mode='Markdown'
    )


def handle_admin_add_task_type(user_id, message_id, callback_data, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø
    type_map = {
        'admin_add_meals': '–û–±–µ–¥—ã',
        'admin_add_cleaning': '–£–±–æ—Ä–∫–∞',
        'admin_add_counting': '–ü–µ—Ä–µ—Å—á–µ—Ç—ã'
    }
    
    task_type = type_map.get(callback_data)
    if not task_type:
        return api.edit_message(user_id, message_id, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –≤ user_data
    user_data = get_user_data()
    if user_id not in user_data:
        user_data[user_id] = {}
    user_data[user_id]['creating_schedule'] = {'type': task_type}
    set_user_state(user_id, 'admin_schedule_select_user')
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = DatabaseAPI.get_all_users()
    if not users:
        return api.edit_message(user_id, message_id, "‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    keyboard = []
    for user in users[:10]:  # –ü–µ—Ä–≤—ã–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        role_emoji = get_role_emoji(user.get('role', ''))
        keyboard.append([{
            'text': f"{role_emoji} @{user['username']}", 
            'callback_data': f'admin_select_user_{user["telegram_id"]}'
        }])
    
    keyboard.append([{'text': '‚ùå –û—Ç–º–µ–Ω–∞', 'callback_data': 'admin_schedule'}])
    
    type_emoji = get_task_type_emoji(task_type)
    
    return api.edit_message(
        user_id, message_id,
        f"üë• *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ: {type_emoji} {task_type}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:",
        reply_markup={'inline_keyboard': keyboard},
        parse_mode='Markdown'
    )


def handle_admin_select_user(user_id, message_id, callback_data, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–∑–¥–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    user_data = get_user_data()
    if (user_id not in user_data or 
        'creating_schedule' not in user_data[user_id]):
        return api.edit_message(user_id, message_id, "‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ—Ç–µ—Ä—è–Ω—ã, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    selected_user_id = callback_data.replace('admin_select_user_', '')
    user_data[user_id]['creating_schedule']['assigned_to'] = selected_user_id
    
    # –ù–∞–π–¥–µ–º username
    users = DatabaseAPI.get_all_users()
    selected_user = next((u for u in users if u['telegram_id'] == selected_user_id), None)
    
    if selected_user:
        user_data[user_id]['creating_schedule']['assigned_username'] = selected_user['username']
        set_user_state(user_id, 'admin_schedule_input_date')
        
        task_type = user_data[user_id]['creating_schedule']['type']
        type_emoji = get_task_type_emoji(task_type)
        
        return api.edit_message(
            user_id, message_id,
            f"üìÖ *–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è*\n\n"
            f"–ó–∞–¥–∞–Ω–∏–µ: {type_emoji} {task_type}\n"
            f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: @{selected_user['username']}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            f"‚Ä¢ `—Å–µ–≥–æ–¥–Ω—è` –∏–ª–∏ `–∑–∞–≤—Ç—Ä–∞`\n"
            f"‚Ä¢ `26.07` –∏–ª–∏ `26.07.2025`\n"
            f"‚Ä¢ `27.07` –∏–ª–∏ `2025-07-27`\n\n"
            f"–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
            parse_mode='Markdown'
        )
    else:
        return api.edit_message(user_id, message_id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")


def handle_admin_callback(user_id, message_id, callback_data, api: TelegramAPI):
    """–†–æ—É—Ç–µ—Ä –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö callback'–æ–≤"""
    
    if callback_data == 'admin':
        return handle_admin_menu_callback(user_id, message_id, api)
    
    elif callback_data == 'admin_users':
        return handle_admin_users(user_id, message_id, api)
    
    elif callback_data == 'admin_stats':
        return handle_admin_stats(user_id, message_id, api)
    
    elif callback_data == 'admin_schedule':
        return handle_admin_schedule_menu(user_id, message_id, api)
    
    elif callback_data == 'admin_schedule_view_all':
        return handle_admin_schedule_view_all(user_id, message_id, api)
    
    elif callback_data == 'admin_schedule_add':
        return handle_admin_schedule_add(user_id, message_id, api)
    
    elif callback_data.startswith('admin_add_'):
        return handle_admin_add_task_type(user_id, message_id, callback_data, api)
    
    elif callback_data.startswith('admin_select_user_'):
        return handle_admin_select_user(user_id, message_id, callback_data, api)
    
    else:
        return api.edit_message(
            user_id,
            message_id,
            f"‚ùì –ê–¥–º–∏–Ω—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è `{callback_data}` –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
            reply_markup={'inline_keyboard': [[{'text': '‚óÄÔ∏è –ö –∞–¥–º–∏–Ω–∫–µ', 'callback_data': 'admin'}]]}
        )
