#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
handlers/utils.py
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API
"""

import requests
import json
import logging

logger = logging.getLogger(__name__)

class TelegramAPI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API"""
    
    def __init__(self, token):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–∞
        
        Args:
            token (str): –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
        """
        self.token = token
        self.api_url = f"https://api.telegram.org/bot{token}"
    
    def send_message(self, chat_id, text, reply_markup=None, parse_mode='Markdown'):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        
        Args:
            chat_id (int): ID —á–∞—Ç–∞
            text (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            reply_markup (dict, optional): –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
            parse_mode (str): –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ (Markdown/HTML)
            
        Returns:
            tuple: (success: bool, result: dict/str)
        """
        try:
            payload = {
                'chat_id': chat_id,
                'text': text[:4096],
                'parse_mode': parse_mode
            }
            
            if reply_markup:
                payload['reply_markup'] = json.dumps(reply_markup)
            
            response = requests.post(
                f"{self.api_url}/sendMessage", 
                json=payload, 
                timeout=10
            )
            
            if response.status_code == 200:
                return True, response.json()
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status_code}")
                return False, response.text
                
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
            return False, str(e)
    
    def edit_message(self, chat_id, message_id, text, reply_markup=None, parse_mode='Markdown'):
        """
        –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        
        Args:
            chat_id (int): ID —á–∞—Ç–∞
            message_id (int): ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            text (str): –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            reply_markup (dict, optional): –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
            parse_mode (str): –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞
            
        Returns:
            tuple: (success: bool, result: dict/str)
        """
        try:
            payload = {
                'chat_id': chat_id,
                'message_id': message_id,
                'text': text[:4096],
                'parse_mode': parse_mode
            }
            
            if reply_markup:
                payload['reply_markup'] = json.dumps(reply_markup)
            
            response = requests.post(
                f"{self.api_url}/editMessageText", 
                json=payload, 
                timeout=10
            )
            
            if response.status_code == 200:
                return True, response.json()
            return False, response.text
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False, str(e)
    
    def answer_callback_query(self, callback_query_id, text=None):
        """
        –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ callback query (—É–±–∏—Ä–∞–µ—Ç "—á–∞—Å–∏–∫–∏")
        
        Args:
            callback_query_id (str): ID callback query
            text (str, optional): –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            payload = {'callback_query_id': callback_query_id}
            if text:
                payload['text'] = text
            
            response = requests.post(
                f"{self.api_url}/answerCallbackQuery", 
                json=payload, 
                timeout=5
            )
            return response.status_code == 200
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ answer callback: {e}")
            return False


def is_admin(user_id):
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    
    Args:
        user_id (int): Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω
    """
    import os
    admin_users_str = os.environ.get('ADMIN_USERS', '398232017,1014841100')
    admins = [
        int(uid.strip()) 
        for uid in admin_users_str.split(',') 
        if uid.strip()
    ]
    return user_id in admins


def get_role_emoji(role):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        role (str): –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        str: –≠–º–æ–¥–∑–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–æ–ª–∏
    """
    return {
        "–î–°": "üëë",
        "–ó–î–°": "üéñÔ∏è",
        "–ö–ª–∞–¥–æ–≤—â–∏–∫": "üë∑"
    }.get(role, "üë§")


def get_task_type_emoji(task_type):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
    
    Args:
        task_type (str): –¢–∏–ø –∑–∞–¥–∞—á–∏
        
    Returns:
        str: –≠–º–æ–¥–∑–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–∏–ø—É –∑–∞–¥–∞—á–∏
    """
    return {
        "–û–±–µ–¥—ã": "üçΩÔ∏è",
        "–£–±–æ—Ä–∫–∞": "üßπ",
        "–ü–µ—Ä–µ—Å—á–µ—Ç—ã": "üî¢"
    }.get(task_type, "üìã")