#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
"""

import threading
import requests
import json
from datetime import datetime
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# HTTP —Å–µ—Å—Å–∏—è
session = requests.Session()
session.timeout = 30

def run_async_in_thread(coro):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç async —Ñ—É–Ω–∫—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    result = [None]
    error = [None]
    
    def worker():
        try:
            import asyncio
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                result[0] = loop.run_until_complete(coro)
            finally:
                loop.close()
        except Exception as e:
            error[0] = e
    
    thread = threading.Thread(target=worker)
    thread.start()
    thread.join(timeout=10)
    
    if error[0]:
        raise error[0]
    return result[0]


class TelegramAPI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API"""
    
    def __init__(self, token):
        self.token = token
        self.api_url = f"https://api.telegram.org/bot{token}"
    
    def send_message(self, chat_id, text, reply_markup=None, parse_mode='Markdown'):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            payload = {
                'chat_id': chat_id,
                'text': text[:4096],
                'parse_mode': parse_mode
            }
            
            if reply_markup:
                payload['reply_markup'] = json.dumps(reply_markup)
            
            response = session.post(f"{self.api_url}/sendMessage", json=payload)
            
            if response.status_code == 200:
                return True, response.json()
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status_code}")
                return False, response.text
                
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
            return False, str(e)
    
    def edit_message(self, chat_id, message_id, text, reply_markup=None, parse_mode='Markdown'):
        """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            payload = {
                'chat_id': chat_id,
                'message_id': message_id,
                'text': text[:4096],
                'parse_mode': parse_mode
            }
            
            if reply_markup:
                payload['reply_markup'] = json.dumps(reply_markup)
            
            response = session.post(f"{self.api_url}/editMessageText", json=payload)
            return response.status_code == 200, response.json() if response.status_code == 200 else response.text
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False, str(e)
    
    def answer_callback_query(self, callback_query_id, text=None):
        """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ callback query"""
        try:
            payload = {'callback_query_id': callback_query_id}
            if text:
                payload['text'] = text
            
            response = session.post(f"{self.api_url}/answerCallbackQuery", json=payload)
            return response.status_code == 200
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ answer callback: {e}")
            return False


class DatabaseAPI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ threading"""
    
    @staticmethod
    def is_admin(user_id):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–¥–º–∏–Ω–∞"""
        from config import ADMINS
        return user_id in ADMINS
    
    @staticmethod
    def get_or_create_user(user_id, username=None):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            from database import get_or_create_user
            return run_async_in_thread(get_or_create_user(user_id, username))
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ get_or_create_user: {e}")
            return None


def get_role_emoji(role):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–æ–ª–∏"""
    return {
        "–î–°": "üëë",
        "–ó–î–°": "üéñÔ∏è", 
        "–ö–ª–∞–¥–æ–≤—â–∏–∫": "üë∑"
    }.get(role, "üë§")


def get_task_type_emoji(task_type):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏"""
    return {
        "–û–±–µ–¥—ã": "üçΩÔ∏è",
        "–£–±–æ—Ä–∫–∞": "üßπ", 
        "–ü–µ—Ä–µ—Å—á–µ—Ç—ã": "üî¢"
    }.get(task_type, "üìã")


def format_date(date_string):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        if isinstance(date_string, str) and len(date_string) >= 10:
            return date_string[:10]
        return str(date_string)
    except:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"


def safe_decode(value):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ YDB"""
    if isinstance(value, bytes):
        return value.decode('utf-8')
    elif value is None:
        return "Unknown"
    else:
        return str(value)
