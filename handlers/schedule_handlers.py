#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
handlers/schedule_handlers.py
–•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
"""

import logging
import re
from datetime import datetime, timedelta
from .utils import TelegramAPI, get_task_type_emoji
import database as db
from .keyboards import get_schedule_menu

logger = logging.getLogger(__name__)


def handle_schedule_menu_text(user_id, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç"""
    return api.send_message(
        user_id,
        "üóìÔ∏è *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=get_schedule_menu(),
        parse_mode='Markdown'
    )


def handle_schedule_menu_callback(user_id, message_id, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —á–µ—Ä–µ–∑ callback"""
    return api.edit_message(
        user_id,
        message_id,
        "üóìÔ∏è *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=get_schedule_menu(),
        parse_mode='Markdown'
    )


def handle_schedule_type(user_id, message_id, schedule_type, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    schedule_items = db.get_schedule_by_type(schedule_type)
    type_emoji = get_task_type_emoji(schedule_type)
    
    if schedule_items:
        message = f"{type_emoji} *{schedule_type}* ({len(schedule_items)})\n\n"
        for i, item in enumerate(schedule_items[:10]):
            time_str = f"{item['start_time']}-{item['end_time']}"
            if time_str == "00:00-23:59": time_str = "–í–µ—Å—å –¥–µ–Ω—å"
            message += f"üìÖ {item['date']} ({time_str}) - @{item['username']}\n"
        if len(schedule_items) > 10:
            message += f"\n... –∏ –µ—â–µ {len(schedule_items) - 10} –∑–∞–ø–∏—Å–µ–π."
    else:
        message = f"{type_emoji} *{schedule_type}*\n\n‚ùå –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π."
    
    return api.edit_message(
        user_id, message_id, message,
        reply_markup={'inline_keyboard': [[{'text': '‚óÄÔ∏è –ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é', 'callback_data': 'schedule'}]]},
        parse_mode='Markdown'
    )

# --- –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ ---
def parse_date_input(date_text):
    date_text = date_text.strip().lower()
    if date_text in ['—Å–µ–≥–æ–¥–Ω—è', 'today']: return datetime.now().date()
    if date_text in ['–∑–∞–≤—Ç—Ä–∞', 'tomorrow']: return (datetime.now() + timedelta(days=1)).date()
    try: return datetime.strptime(date_text, '%d.%m.%Y').date()
    except: pass
    try: return datetime.strptime(f"{date_text}.{datetime.now().year}", '%d.%m.%Y').date()
    except: pass
    try: return datetime.strptime(date_text, '%Y-%m-%d').date()
    except: return None

def parse_time_input(time_text):
    time_text = time_text.strip().lower()
    if time_text in ['–≤–µ—Å—å –¥–µ–Ω—å', '–≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è']: return "00:00", "23:59"
    match = re.search(r'(\d{1,2}):(\d{2})\s*-\s*(\d{1,2}):(\d{2})', time_text)
    if match: return f"{match.group(1)}:{match.group(2)}", f"{match.group(3)}:{match.group(4)}"
    match = re.search(r'(\d{1,2})-(\d{1,2})', time_text)
    if match: return f"{match.group(1)}:00", f"{match.group(2)}:00"
    return None, None

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –≤ –¥–∏–∞–ª–æ–≥–∞—Ö ---
def handle_text_message_schedule(user_id, text, state, data, api: TelegramAPI):
    if text.lower() == '/cancel':
        db.set_user_state(user_id, 'main', {})
        return api.send_message(user_id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    # –®–∞–≥: –í–≤–æ–¥ –¥–∞—Ç—ã
    if state == 'admin_schedule_input_date':
        parsed_date = parse_date_input(text)
        if not parsed_date: return api.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        
        data['creating_schedule']['date'] = parsed_date.strftime('%Y-%m-%d')
        db.set_user_state(user_id, 'admin_schedule_input_time', data)
        
        return api.send_message(user_id, "‚è∞ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, `9-12` –∏–ª–∏ `–≤–µ—Å—å –¥–µ–Ω—å`):")

    # –®–∞–≥: –í–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏
    elif state == 'admin_schedule_input_time':
        start_time, end_time = parse_time_input(text)
        if not start_time: return api.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

        data['creating_schedule']['start_time'] = start_time
        data['creating_schedule']['end_time'] = end_time
        
        task_type = data['creating_schedule']['type']
        if task_type in ['–£–±–æ—Ä–∫–∞', '–ü–µ—Ä–µ—Å—á–µ—Ç—ã']:
            db.set_user_state(user_id, 'admin_schedule_input_details', data)
            return api.send_message(user_id, "üìù –£–∫–∞–∂–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç–µ–ª–ª–∞–∂–∏) –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ `–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å`:")
        else:
            return _create_schedule_from_data(user_id, data, api)
    
    # –®–∞–≥: –í–≤–æ–¥ –¥–µ—Ç–∞–ª–µ–π
    elif state == 'admin_schedule_input_details':
        data['creating_schedule']['details'] = None if text.lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' else text
        return _create_schedule_from_data(user_id, data, api)

    return api.send_message(user_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")


def _create_schedule_from_data(user_id, data, api: TelegramAPI):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è)"""
    schedule_data = data['creating_schedule']
    success, result = db.create_schedule_task(
        user_id=schedule_data['assigned_to'],
        task_type=schedule_data['type'],
        date=schedule_data['date'],
        time_slot=f"{schedule_data['start_time']}-{schedule_data['end_time']}",
        shelves=schedule_data.get('details')
    )
    db.set_user_state(user_id, 'main', {}) # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    
    if success:
        message = f"‚úÖ *–ó–∞–ø–∏—Å—å –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞!*\n\n"
        message += f"–¢–∏–ø: {schedule_data['type']}\n"
        message += f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: @{schedule_data['assigned_username']}\n"
        message += f"–î–∞—Ç–∞: {schedule_data['date']}"
    else:
        message = f"‚ùå *–û—à–∏–±–∫–∞!*\n\n–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏:\n`{result}`"
        
    return api.send_message(user_id, message, parse_mode='Markdown')


def handle_schedule_callback(user_id, message_id, query_id, callback_data, api: TelegramAPI):
    """–†–æ—É—Ç–µ—Ä –¥–ª—è callback'–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    api.answer_callback_query(query_id)
    
    if callback_data == 'schedule_meals':
        return handle_schedule_type(user_id, message_id, '–û–±–µ–¥—ã', api)
    elif callback_data == 'schedule_cleaning':
        return handle_schedule_type(user_id, message_id, '–£–±–æ—Ä–∫–∞', api)
    elif callback_data == 'schedule_counting':
        return handle_schedule_type(user_id, message_id, '–ü–µ—Ä–µ—Å—á–µ—Ç—ã', api)

    # –ï—Å–ª–∏ –º—ã –∑–¥–µ—Å—å, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ 'schedule' - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞
    return handle_schedule_menu_callback(user_id, message_id, api)
