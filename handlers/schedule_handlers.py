#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
handlers/schedule_handlers.py
–•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
"""

import logging
import re
from datetime import datetime, timedelta
from .utils import TelegramAPI, get_task_type_emoji
from .database_api import db
from .keyboards import get_schedule_menu, get_back_button
from .main_handlers import (
    get_user_states, get_user_data, set_user_state, 
    set_user_data, get_user_data_value, clear_user_data
)

logger = logging.getLogger(__name__)


def handle_schedule_menu_text(user_id, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç"""
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = {}
    for schedule_type in ['–û–±–µ–¥—ã', '–£–±–æ—Ä–∫–∞', '–ü–µ—Ä–µ—Å—á–µ—Ç—ã']:
        items = db.get_schedule_by_type(schedule_type)
        stats[schedule_type] = len(items) if items else 0
    
    total = sum(stats.values())
    
    if total > 0:
        details = []
        for stype, count in stats.items():
            if count > 0:
                details.append(f"{count} - {stype.lower()}")
        
        stats_text = f"üìä –í —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π: *{total}*, –∏–∑ –Ω–∏—Ö {', '.join(details)}"
    else:
        stats_text = "üìã –í —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π"
    
    return api.send_message(
        user_id,
        f"""üóìÔ∏è *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ*

{stats_text}

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:""",
        reply_markup=get_schedule_menu(),
        parse_mode='Markdown'
    )


def handle_schedule_menu_callback(user_id, message_id, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —á–µ—Ä–µ–∑ callback"""
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = {}
    for schedule_type in ['–û–±–µ–¥—ã', '–£–±–æ—Ä–∫–∞', '–ü–µ—Ä–µ—Å—á–µ—Ç—ã']:
        items = db.get_schedule_by_type(schedule_type)
        stats[schedule_type] = len(items) if items else 0
    
    total = sum(stats.values())
    
    if total > 0:
        details = []
        for stype, count in stats.items():
            if count > 0:
                details.append(f"{count} - {stype.lower()}")
        
        stats_text = f"üìä –í —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π: *{total}*, –∏–∑ –Ω–∏—Ö {', '.join(details)}"
    else:
        stats_text = "üìã –í —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π"
    
    return api.edit_message(
        user_id,
        message_id,
        f"üóìÔ∏è *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ*\n\n{stats_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=get_schedule_menu()
    )


def handle_schedule_type(user_id, message_id, callback_data, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    
    type_mapping = {
        'schedule_meals': '–û–±–µ–¥—ã',
        'schedule_cleaning': '–£–±–æ—Ä–∫–∞', 
        'schedule_counting': '–ü–µ—Ä–µ—Å—á–µ—Ç—ã'
    }
    
    schedule_type = type_mapping.get(callback_data)
    if not schedule_type:
        return api.edit_message(
            user_id,
            message_id,
            "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"
        )
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    schedule_items = db.get_schedule_by_type(schedule_type)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    type_emoji = get_task_type_emoji(schedule_type)
    
    if schedule_items:
        message = f"{type_emoji} *{schedule_type}*\n\n"
        
        for i, item in enumerate(schedule_items[:10]):
            time_str = f"{item['start_time']}-{item['end_time']}"
            if time_str == "00:00-23:59":
                time_str = "–í–µ—Å—å –¥–µ–Ω—å"
            
            message += f"üìÖ {item['date']}\n"
            message += f"‚è∞ {time_str}\n"
            message += f"üë§ @{item['username']}\n\n"
        
        if len(schedule_items) > 10:
            message += f"... –∏ –µ—â–µ {len(schedule_items) - 10} –∑–∞–ø–∏—Å–µ–π"
    else:
        message = f"{type_emoji} *{schedule_type}*\n\n‚ùå –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π"
    
    return api.edit_message(
        user_id,
        message_id,
        message,
        reply_markup={'inline_keyboard': [[{'text': '‚óÄÔ∏è –ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é', 'callback_data': 'schedule'}]]},
        parse_mode='Markdown'
    )


def parse_date_input(date_text):
    """–ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞"""
    
    date_text = date_text.strip().lower()
    
    if date_text in ['—Å–µ–≥–æ–¥–Ω—è', 'today']:
        return datetime.now().date()
    elif date_text in ['–∑–∞–≤—Ç—Ä–∞', 'tomorrow']:
        return (datetime.now() + timedelta(days=1)).date()
    
    # –§–æ—Ä–º–∞—Ç—ã –¥–∞—Ç
    formats = [
        (r'(\d{1,2})\.(\d{1,2})\.(\d{4})', '%d.%m.%Y'),
        (r'(\d{1,2})\.(\d{1,2})', f'%d.%m.{datetime.now().year}'),
        (r'(\d{1,2})/(\d{1,2})/(\d{4})', '%d/%m/%Y'),
        (r'(\d{1,2})/(\d{1,2})', f'%d/%m/{datetime.now().year}'),
        (r'(\d{4})-(\d{1,2})-(\d{1,2})', '%Y-%m-%d'),
    ]
    
    for pattern, fmt in formats:
        match = re.match(pattern, date_text)
        if match:
            try:
                if '%Y' not in fmt:
                    parsed_date = datetime.strptime(date_text + f'.{datetime.now().year}', fmt.replace(f'.{datetime.now().year}', '.%Y')).date()
                else:
                    parsed_date = datetime.strptime(date_text, fmt).date()
                
                if parsed_date >= datetime.now().date():
                    return parsed_date
                else:
                    return parsed_date.replace(year=datetime.now().year + 1)
            except:
                continue
    
    return None


def parse_time_input(time_text):
    """–ü–∞—Ä—Å–∏—Ç –≤—Ä–µ–º—è –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞"""
    
    time_text = time_text.strip().lower()
    
    if time_text in ['–≤–µ—Å—å –¥–µ–Ω—å', '–≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è', '—Ü–µ–ª—ã–π –¥–µ–Ω—å']:
        return "00:00", "23:59"
    
    # –î–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏
    time_patterns = [
        r'(\d{1,2}):(\d{2})\s*[-‚Äì]\s*(\d{1,2}):(\d{2})',  # 09:00-12:00
        r'(\d{1,2})\s*[-‚Äì]\s*(\d{1,2})',                     # 9-12
        r'(\d{1,2}):(\d{2})',                                  # 14:30
        r'(\d{1,2})',                                           # 14
    ]
    
    for pattern in time_patterns:
        match = re.search(pattern, time_text)
        if match:
            groups = match.groups()
            if len(groups) == 4:  # HH:MM-HH:MM
                start_time = f"{int(groups[0]):02d}:{int(groups[1]):02d}"
                end_time = f"{int(groups[2]):02d}:{int(groups[3]):02d}"
                return start_time, end_time
            elif len(groups) == 2 and ':' in time_text:  # HH:MM
                time_str = f"{int(groups[0]):02d}:{int(groups[1]):02d}"
                return time_str, time_str
            elif len(groups) == 2:  # HH-HH
                start_time = f"{int(groups[0]):02d}:00"
                end_time = f"{int(groups[1]):02d}:00"
                return start_time, end_time
            elif len(groups) == 1:  # HH
                time_str = f"{int(groups[0]):02d}:00"
                return time_str, time_str
    
    return None, None


def handle_schedule_date_input(user_id, text, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    
    user_data = get_user_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    if (user_id not in user_data or 
        'creating_schedule' not in user_data[user_id]):
        is_admin = db.is_admin(user_id)
        return api.send_message(
            user_id,
            "‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ—Ç–µ—Ä—è–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_back_button()
        )
    
    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
    parsed_date = parse_date_input(text)
    
    if not parsed_date:
        return api.send_message(
            user_id,
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É '{text}'!\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
            f"‚Ä¢ `—Å–µ–≥–æ–¥–Ω—è`, `–∑–∞–≤—Ç—Ä–∞`\n"
            f"‚Ä¢ `{datetime.now().strftime('%d.%m')}`, `{datetime.now().strftime('%d.%m.%Y')}`\n"
            f"‚Ä¢ `{(datetime.now() + timedelta(days=1)).strftime('%Y-%m-%d')}`\n\n"
            f"–ò–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
            parse_mode='Markdown'
        )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É
    user_data[user_id]['creating_schedule']['date'] = parsed_date.strftime('%Y-%m-%d')
    set_user_state(user_id, 'admin_schedule_input_time')
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –≤—Ä–µ–º–µ–Ω–∏
    task_type = user_data[user_id]['creating_schedule']['type']
    username = user_data[user_id]['creating_schedule']['assigned_username']
    type_emoji = get_task_type_emoji(task_type)
    
    return api.send_message(
        user_id,
        f"‚è∞ *–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è*\n\n"
        f"–ó–∞–¥–∞–Ω–∏–µ: {type_emoji} {task_type}\n"
        f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: @{username}\n"
        f"–î–∞—Ç–∞: {parsed_date.strftime('%d.%m.%Y')}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        f"‚Ä¢ `–≤–µ—Å—å –¥–µ–Ω—å` - –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å\n"
        f"‚Ä¢ `09:00-12:00` - –¥–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏\n"
        f"‚Ä¢ `9-12` - —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω\n"
        f"‚Ä¢ `14:30` - –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è\n\n"
        f"–ò–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        parse_mode='Markdown'
    )


def handle_schedule_time_input(user_id, text, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    
    user_data = get_user_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    if (user_id not in user_data or 
        'creating_schedule' not in user_data[user_id]):
        return api.send_message(
            user_id,
            "‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ—Ç–µ—Ä—è–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_back_button()
        )
    
    # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
    start_time, end_time = parse_time_input(text)
    
    if not start_time or not end_time:
        return api.send_message(
            user_id,
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è '{text}'!\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
            f"‚Ä¢ `–≤–µ—Å—å –¥–µ–Ω—å`\n"
            f"‚Ä¢ `09:00-12:00`\n"
            f"‚Ä¢ `9-12`\n"
            f"‚Ä¢ `14:30`\n\n"
            f"–ò–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
            parse_mode='Markdown'
        )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è
    user_data[user_id]['creating_schedule']['start_time'] = start_time
    user_data[user_id]['creating_schedule']['end_time'] = end_time
    
    task_type = user_data[user_id]['creating_schedule']['type']
    
    # –ï—Å–ª–∏ —ç—Ç–æ —É–±–æ—Ä–∫–∞ –∏–ª–∏ –ø–µ—Ä–µ—Å—á–µ—Ç—ã, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏
    if task_type in ['–£–±–æ—Ä–∫–∞', '–ü–µ—Ä–µ—Å—á–µ—Ç—ã']:
        detail_type = "—Å—Ç–µ–ª–ª–∞–∂–∏/–ø–æ–ª–∫–∏" if task_type == '–£–±–æ—Ä–∫–∞' else "—Å—Ç–µ–ª–ª–∞–∂–∏ –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞"
        set_user_state(user_id, 'admin_schedule_input_details')
        
        username = user_data[user_id]['creating_schedule']['assigned_username']
        date_str = user_data[user_id]['creating_schedule']['date']
        type_emoji = get_task_type_emoji(task_type)
        
        time_display = f"{start_time}-{end_time}" if f"{start_time}-{end_time}" != "00:00-23:59" else "–í–µ—Å—å –¥–µ–Ω—å"
        
        return api.send_message(
            user_id,
            f"üìù *–î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞–Ω–∏—è*\n\n"
            f"–ó–∞–¥–∞–Ω–∏–µ: {type_emoji} {task_type}\n"
            f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: @{username}\n"
            f"–î–∞—Ç–∞: {date_str}\n"
            f"–í—Ä–µ–º—è: {time_display}\n\n"
            f"–£–∫–∞–∂–∏—Ç–µ {detail_type}:\n"
            f"‚Ä¢ `–ê1-–ê5` - –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ–ª–æ–∫\n"
            f"‚Ä¢ `–ù` - –≤–µ—Å—å —Å—Ç–µ–ª–ª–∞–∂ –ù\n"
            f"‚Ä¢ `–ê1, –ê3, –ë2-–ë4` - –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—á–∞—Å—Ç–∫–æ–≤\n"
            f"‚Ä¢ `–≤—Å–µ` - –≤—Å–µ —Å—Ç–µ–ª–ª–∞–∂–∏\n\n"
            f"–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ `–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å` –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è\n"
            f"–ò–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
            parse_mode='Markdown'
        )
    else:
        # –î–ª—è –æ–±–µ–¥–æ–≤ —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        return create_schedule_from_data(user_id, api)


def handle_schedule_details_input(user_id, text, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–µ—Ç–∞–ª–µ–π –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    
    user_data = get_user_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    if (user_id not in user_data or 
        'creating_schedule' not in user_data[user_id]):
        return api.send_message(
            user_id,
            "‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ—Ç–µ—Ä—è–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_back_button()
        )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª–∏
    if text.strip().lower() in ['–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'skip']:
        user_data[user_id]['creating_schedule']['details'] = None
    else:
        user_data[user_id]['creating_schedule']['details'] = text.strip()
    
    # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    return create_schedule_from_data(user_id, api)


def create_schedule_from_data(user_id, api: TelegramAPI):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    user_data = get_user_data()
    schedule_data = user_data[user_id]['creating_schedule']
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º keyboard –≤ –Ω–∞—á–∞–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏!
    keyboard = [
        [{'text': '‚ûï –°–æ–∑–¥–∞—Ç—å –µ—â–µ', 'callback_data': 'admin_schedule_add'}],
        [{'text': 'üìÖ –ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é', 'callback_data': 'admin_schedule'}],
        [{'text': 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data': 'back_main'}]
    ]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    assigned_to = schedule_data['assigned_to']
    task_type = schedule_data['type']
    date = schedule_data['date']
    time_slot = f"{schedule_data['start_time']}-{schedule_data['end_time']}"
    shelves = schedule_data.get('details')  # –°—Ç–µ–ª–ª–∞–∂–∏/–¥–µ—Ç–∞–ª–∏
    
    # –†–ï–ê–õ–¨–ù–û –°–û–ó–î–ê–ï–ú –í –ë–ê–ó–ï –î–ê–ù–ù–´–•!
    try:
        logger.info(f"üìã –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ YDB: {task_type} –¥–ª—è {assigned_to} –Ω–∞ {date}")
        
        success, result = db.create_schedule_task(
            user_id=assigned_to,
            task_type=task_type,
            date=date,
            time_slot=time_slot,
            shelves=shelves
        )
        
        if success:
            logger.info(f"‚úÖ –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞ –≤ YDB: {result}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            type_emoji = get_task_type_emoji(task_type)
            time_display = time_slot if time_slot != "00:00-23:59" else "–í–µ—Å—å –¥–µ–Ω—å"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            date_parts = date.split('-')
            if len(date_parts) == 3:
                formatted_date = f"{date_parts[2]}.{date_parts[1]}.{date_parts[0]}"
            else:
                formatted_date = date
            
            success_message = (
                f"‚úÖ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑–µ!*\n\n"
                f"üéØ –¢–∏–ø: {type_emoji} {task_type}\n"
                f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: @{schedule_data['assigned_username']}\n"
                f"üìÖ –î–∞—Ç–∞: {formatted_date}\n"
                f"‚è∞ –í—Ä–µ–º—è: {time_display}\n"
            )
            
            if shelves:
                success_message += f"üìù –î–µ—Ç–∞–ª–∏: {shelves}\n"
            
            success_message += f"\nüéâ –ó–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!"
            success_message += f"\nüÜî ID –∑–∞–¥–∞—á–∏: `{result[:8]}...`"
            
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤ YDB: {result}")
            
            success_message = (
                f"‚ùå *–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è*\n\n"
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:\n"
                f"`{result}`\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        
        success_message = (
            f"‚ùå *–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞*\n\n"
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:\n"
            f"`{str(e)}`\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    set_user_state(user_id, 'main')
    if 'creating_schedule' in user_data[user_id]:
        del user_data[user_id]['creating_schedule']
    
    return api.send_message(
        user_id,
        success_message,
        reply_markup={'inline_keyboard': keyboard},
        parse_mode='Markdown'
    )


def handle_schedule_callback(user_id, message_id, callback_data, api: TelegramAPI):
    """–†–æ—É—Ç–µ—Ä –¥–ª—è callback'–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    
    if callback_data == 'schedule':
        return handle_schedule_menu_callback(user_id, message_id, api)
    
    elif callback_data in ['schedule_meals', 'schedule_cleaning', 'schedule_counting']:
        return handle_schedule_type(user_id, message_id, callback_data, api)
    
    else:
        return api.edit_message(
            user_id,
            message_id,
            f"‚ùì –§—É–Ω–∫—Ü–∏—è `{callback_data}` –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
            reply_markup={'inline_keyboard': [[{'text': '‚óÄÔ∏è –ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é', 'callback_data': 'schedule'}]]}
        )