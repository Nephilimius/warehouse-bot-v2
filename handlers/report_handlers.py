#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
handlers/report_handlers.py
–•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ç—á–µ—Ç–∞–º–∏
"""

import logging
from .utils import TelegramAPI, get_task_type_emoji, get_role_emoji
import database as db
from .keyboards import get_reports_menu

logger = logging.getLogger(__name__)


def handle_reports_menu_text(user_id, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç (—Å Reply –∫–Ω–æ–ø–∫–∏)"""
    return api.send_message(
        user_id,
        "üìä *–û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:",
        reply_markup=get_reports_menu(),
        parse_mode='Markdown'
    )


def handle_reports_menu_callback(user_id, message_id, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ callback (—Å Inline –∫–Ω–æ–ø–∫–∏)"""
    return api.edit_message(
        user_id,
        message_id,
        "üìä *–û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:",
        reply_markup=get_reports_menu(),
        parse_mode='Markdown'
    )


def handle_quality_report(user_id, message_id, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É —Ä–∞–±–æ—Ç—ã"""
    
    quality_data = db.get_quality_report()
    
    if quality_data:
        message = "‚≠ê *–û—Ç—á–µ—Ç –ø–æ –∫–∞—á–µ—Å—Ç–≤—É —Ä–∞–±–æ—Ç—ã*\n\n"
        for i, user in enumerate(quality_data[:10]):
            role_emoji = get_role_emoji(user['role'])
            stars = "‚≠ê" * int(user.get('avg_rating', 0)) if user.get('avg_rating', 0) > 0 else "‚ùå"
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Markdown-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –Ω–∏–∫–Ω–µ–π–º–æ–≤
            username = user['username'].replace('_', '\\_')
            message += f"{i+1}. {role_emoji} *@{username}*\n"
            message += f"   –†–µ–π—Ç–∏–Ω–≥: {stars} ({user.get('avg_rating', 0):.1f}/5)\n"
            message += f"   –ó–∞–¥–∞—á: {user.get('completed_tasks', 0)}/{user.get('total_tasks', 0)}\n\n"
        
        message += f"üìä *–í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ:* {len(quality_data)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"
    else:
        message = "‚≠ê *–û—Ç—á–µ—Ç –ø–æ –∫–∞—á–µ—Å—Ç–≤—É —Ä–∞–±–æ—Ç—ã*\n\n‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
    
    return api.edit_message(
        user_id, message_id, message,
        reply_markup={'inline_keyboard': [[{'text': '‚óÄÔ∏è –ö –æ—Ç—á–µ—Ç–∞–º', 'callback_data': 'reports'}]]},
        parse_mode='Markdown'
    )


def handle_time_report(user_id, message_id, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    
    time_data = db.get_time_report()
    
    if time_data:
        message = "‚è±Ô∏è *–û—Ç—á–µ—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è*\n\n"
        for task_info in time_data:
            type_emoji = get_task_type_emoji(task_info['type'])
            
            message += f"{type_emoji} *{task_info['type']}*\n"
            message += f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {task_info.get('avg_time', 0):.0f} –º–∏–Ω\n"
            message += f"   –ó–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {task_info.get('total_tasks', 0)}\n\n"
    else:
        message = "‚è±Ô∏è *–û—Ç—á–µ—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è*\n\n‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."
    
    return api.edit_message(
        user_id, message_id, message,
        reply_markup={'inline_keyboard': [[{'text': '‚óÄÔ∏è –ö –æ—Ç—á–µ—Ç–∞–º', 'callback_data': 'reports'}]]},
        parse_mode='Markdown'
    )


def handle_tasks_report(user_id, message_id, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ –∑–∞–¥–∞—á–∞–º"""
    
    tasks_data = db.get_tasks_report()
    
    if tasks_data:
        message = "üìã *–û—Ç—á–µ—Ç –ø–æ —Ç–∏–ø–∞–º –∑–∞–¥–∞—á*\n\n"
        for task_type, stats in tasks_data.items():
            type_emoji = get_task_type_emoji(task_type)
            # –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å
            total = stats.get('total', 0)
            completed = stats.get('completed', 0)
            completion_rate = (completed / total * 100) if total > 0 else 0
            
            message += f"{type_emoji} *{task_type}* ({completion_rate:.0f}% –≤—ã–ø–æ–ª–Ω–µ–Ω–æ)\n"
            message += f"   –í—Å–µ–≥–æ: {total}, –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed}\n\n"
    else:
        message = "üìã *–û—Ç—á–µ—Ç –ø–æ —Ç–∏–ø–∞–º –∑–∞–¥–∞—á*\n\n‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–¥–∞—á–∞—Ö."
    
    return api.edit_message(
        user_id, message_id, message,
        reply_markup={'inline_keyboard': [[{'text': '‚óÄÔ∏è –ö –æ—Ç—á–µ—Ç–∞–º', 'callback_data': 'reports'}]]},
        parse_mode='Markdown'
    )


def handle_general_report(user_id, message_id, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    
    general_data = db.get_general_report()
    
    if general_data:
        message = "üìà *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã*\n\n"
        
        message += "üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n"
        for role, count in general_data.get('users', {}).items():
            role_emoji = get_role_emoji(role)
            message += f"   {role_emoji} {role}: {count}\n"
        
        message += f"\nüìã *–ó–∞–¥–∞—á–∏:*\n"
        for status, count in general_data.get('tasks', {}).items():
            status_emoji = {"–í—ã–ø–æ–ª–Ω–µ–Ω–æ": "‚úÖ", "–û–∂–∏–¥–∞—é—â–µ–µ": "‚è≥", "–í —Ä–∞–±–æ—Ç–µ": "üîÑ"}.get(status, "üìã")
            message += f"   {status_emoji} {status}: {count}\n"
        
        if general_data.get('avg_rating', 0) > 0:
            stars = "‚≠ê" * int(general_data['avg_rating'])
            message += f"\n‚≠ê *–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ –∑–∞–¥–∞—á–∞–º:*\n"
            message += f"   {stars} ({general_data['avg_rating']:.1f}/5)"
    else:
        message = "üìà *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
    
    return api.edit_message(
        user_id, message_id, message,
        reply_markup={'inline_keyboard': [[{'text': '‚óÄÔ∏è –ö –æ—Ç—á–µ—Ç–∞–º', 'callback_data': 'reports'}]]},
        parse_mode='Markdown'
    )


# --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨: –¥–æ–±–∞–≤–ª–µ–Ω –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä query_id ---
def handle_report_callback(user_id, message_id, query_id, callback_data, api: TelegramAPI):
    """–†–æ—É—Ç–µ—Ä –¥–ª—è callback'–æ–≤ –æ—Ç—á–µ—Ç–æ–≤"""
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
    api.answer_callback_query(query_id)
    
    if callback_data == 'report_quality':
        return handle_quality_report(user_id, message_id, api)
    
    elif callback_data == 'report_time':
        return handle_time_report(user_id, message_id, api)
    
    elif callback_data == 'report_tasks':
        return handle_tasks_report(user_id, message_id, api)
    
    elif callback_data == 'report_general':
        return handle_general_report(user_id, message_id, api)
    
    else:
        # –ó–∞–≥–ª—É—à–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ callback'–∞
        return api.edit_message(
            user_id,
            message_id,
            f"‚ùì –§—É–Ω–∫—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ `{callback_data}` –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
            reply_markup={'inline_keyboard': [[{'text': '‚óÄÔ∏è –ö –æ—Ç—á–µ—Ç–∞–º', 'callback_data': 'reports'}]]}
        )