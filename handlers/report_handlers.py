#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
handlers/report_handlers.py
–•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ç—á–µ—Ç–∞–º–∏
"""

import logging
from .utils import TelegramAPI, get_task_type_emoji, get_role_emoji
from .database_api import DatabaseAPI
from .keyboards import get_reports_menu

logger = logging.getLogger(__name__)


def handle_reports_menu_text(user_id, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç"""
    
    return api.send_message(
        user_id,
        """üìä *–û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞*

–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç—á–µ—Ç—ã:
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
‚Ä¢ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á  
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∑–∞–¥–∞—á
‚Ä¢ –û–±—â–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:""",
        reply_markup=get_reports_menu(),
        parse_mode='Markdown'
    )


def handle_reports_menu_callback(user_id, message_id, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ callback"""
    
    return api.edit_message(
        user_id,
        message_id,
        "üìä *–û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞*\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç—á–µ—Ç—ã:\n‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n‚Ä¢ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á\n‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∑–∞–¥–∞—á\n‚Ä¢ –û–±—â–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:",
        reply_markup=get_reports_menu()
    )


def handle_quality_report(user_id, message_id, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É —Ä–∞–±–æ—Ç—ã"""
    
    quality_data = DatabaseAPI.get_quality_report()
    
    if quality_data:
        message = "‚≠ê *–û—Ç—á–µ—Ç –ø–æ –∫–∞—á–µ—Å—Ç–≤—É —Ä–∞–±–æ—Ç—ã*\n\n"
        
        for i, user in enumerate(quality_data[:10]):  # –¢–æ–ø-10
            role_emoji = get_role_emoji(user['role'])
            stars = "‚≠ê" * int(user['avg_rating']) if user['avg_rating'] > 0 else "‚ùå"
            
            message += f"{i+1}. {role_emoji} *@{user['username']}*\n"
            message += f"   –†–µ–π—Ç–∏–Ω–≥: {stars} ({user['avg_rating']:.1f}/5)\n"
            message += f"   –ó–∞–¥–∞—á: {user['completed_tasks']}/{user['total_tasks']}\n"
            
            if user['avg_time'] > 0:
                message += f"   –í—Ä–µ–º—è: {user['avg_time']:.0f} –º–∏–Ω\n"
            
            message += "\n"
            
            if i >= 9:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10
                break
        
        message += f"üìä *–í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ:* {len(quality_data)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"
    else:
        message = "‚≠ê *–û—Ç—á–µ—Ç –ø–æ –∫–∞—á–µ—Å—Ç–≤—É —Ä–∞–±–æ—Ç—ã*\n\n‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n\n_–í—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á —Å –æ—Ü–µ–Ω–∫–∞–º–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞_"
    
    return api.edit_message(
        user_id, message_id, message,
        reply_markup={'inline_keyboard': [[{'text': '‚óÄÔ∏è –ö –æ—Ç—á–µ—Ç–∞–º', 'callback_data': 'reports'}]]},
        parse_mode='Markdown'
    )


def handle_time_report(user_id, message_id, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    
    time_data = DatabaseAPI.get_time_report()
    
    if time_data:
        message = "‚è±Ô∏è *–û—Ç—á–µ—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è*\n\n"
        
        for task_info in time_data:
            type_emoji = get_task_type_emoji(task_info['type'])
            
            message += f"{type_emoji} *{task_info['type']}*\n"
            message += f"   –ó–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {task_info['total_tasks']}\n"
            message += f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {task_info['avg_time']:.0f} –º–∏–Ω\n"
            message += f"   –î–∏–∞–ø–∞–∑–æ–Ω: {task_info['min_time']:.0f}-{task_info['max_time']:.0f} –º–∏–Ω\n"
            
            if task_info['long_tasks'] > 0:
                message += f"   –î–æ–ª–≥–∏—Ö –∑–∞–¥–∞—á (>1—á): {task_info['long_tasks']}\n"
            
            message += "\n"
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_tasks = sum(t['total_tasks'] for t in time_data)
        avg_all_time = sum(t['avg_time'] * t['total_tasks'] for t in time_data) / total_tasks if total_tasks > 0 else 0
        
        message += f"üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
        message += f"–í—Å–µ–≥–æ –∑–∞–¥–∞—á: {total_tasks}\n"
        message += f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_all_time:.0f} –º–∏–Ω"
    else:
        message = "‚è±Ô∏è *–û—Ç—á–µ—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è*\n\n‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n\n_–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞—á–∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞_"
    
    return api.edit_message(
        user_id, message_id, message,
        reply_markup={'inline_keyboard': [[{'text': '‚óÄÔ∏è –ö –æ—Ç—á–µ—Ç–∞–º', 'callback_data': 'reports'}]]},
        parse_mode='Markdown'
    )


def handle_tasks_report(user_id, message_id, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ –∑–∞–¥–∞—á–∞–º"""
    
    tasks_data = DatabaseAPI.get_tasks_report()
    
    if tasks_data:
        message = "üìã *–û—Ç—á–µ—Ç –ø–æ —Ç–∏–ø–∞–º –∑–∞–¥–∞—á*\n\n"
        
        total_all = 0
        completed_all = 0
        
        for task_type, stats in tasks_data.items():
            type_emoji = get_task_type_emoji(task_type)
            
            completion_rate = (stats['completed'] / stats['total'] * 100) if stats['total'] > 0 else 0
            
            message += f"{type_emoji} *{task_type}*\n"
            message += f"   –í—Å–µ–≥–æ: {stats['total']} –∑–∞–¥–∞—á\n"
            message += f"   –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['completed']} ({completion_rate:.0f}%)\n"
            
            if stats['pending'] > 0:
                message += f"   –û–∂–∏–¥–∞—é—Ç: {stats['pending']}\n"
            
            if stats['in_progress'] > 0:
                message += f"   –í —Ä–∞–±–æ—Ç–µ: {stats['in_progress']}\n"
            
            if stats['avg_rating'] > 0:
                stars = "‚≠ê" * int(stats['avg_rating'])
                message += f"   –ö–∞—á–µ—Å—Ç–≤–æ: {stars} ({stats['avg_rating']:.1f}/5)\n"
            
            message += "\n"
            
            total_all += stats['total']
            completed_all += stats['completed']
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        overall_completion = (completed_all / total_all * 100) if total_all > 0 else 0
        
        message += f"üìä *–û–±—â–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:*\n"
        message += f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_all}/{total_all} ({overall_completion:.0f}%)"
    else:
        message = "üìã *–û—Ç—á–µ—Ç –ø–æ —Ç–∏–ø–∞–º –∑–∞–¥–∞—á*\n\n‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–¥–∞—á–∞—Ö\n\n_–°–æ–∑–¥–∞–π—Ç–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞_"
    
    return api.edit_message(
        user_id, message_id, message,
        reply_markup={'inline_keyboard': [[{'text': '‚óÄÔ∏è –ö –æ—Ç—á–µ—Ç–∞–º', 'callback_data': 'reports'}]]},
        parse_mode='Markdown'
    )


def handle_general_report(user_id, message_id, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    
    general_data = DatabaseAPI.get_general_report()
    
    if general_data:
        message = "üìà *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã*\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        message += "üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n"
        for role, count in general_data.get('users', {}).items():
            role_emoji = get_role_emoji(role)
            message += f"   {role_emoji} {role}: {count}\n"
        
        message += f"   üìä –í—Å–µ–≥–æ: {general_data.get('total_users', 0)}\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á
        message += "üìã *–ó–∞–¥–∞—á–∏:*\n"
        for status, count in general_data.get('tasks', {}).items():
            status_emoji = {"–í—ã–ø–æ–ª–Ω–µ–Ω–æ": "‚úÖ", "–û–∂–∏–¥–∞—é—â–µ–µ": "‚è≥", "–í —Ä–∞–±–æ—Ç–µ": "üîÑ"}.get(status, "üìã")
            message += f"   {status_emoji} {status}: {count}\n"
        
        message += f"   üìä –í—Å–µ–≥–æ: {general_data.get('total_tasks', 0)}\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        if general_data.get('schedule'):
            message += "üóìÔ∏è *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:*\n"
            for stype, count in general_data.get('schedule', {}).items():
                type_emoji = get_task_type_emoji(stype)
                message += f"   {type_emoji} {stype}: {count}\n"
            
            message += f"   üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {general_data.get('total_schedule', 0)}\n\n"
        
        # –ö–∞—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã
        if general_data.get('avg_rating', 0) > 0:
            stars = "‚≠ê" * int(general_data['avg_rating'])
            message += f"‚≠ê *–ö–∞—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã:*\n"
            message += f"   –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {stars} ({general_data['avg_rating']:.1f}/5)\n"
            message += f"   –û—Ü–µ–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {general_data.get('rated_tasks', 0)}"
        else:
            message += "‚≠ê *–ö–∞—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã:*\n   ‚ùå –ù–µ—Ç –æ—Ü–µ–Ω–æ–∫"
    else:
        message = "üìà *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n\n_–î–æ–±–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∑–∞–¥–∞—á–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏_"
    
    return api.edit_message(
        user_id, message_id, message,
        reply_markup={'inline_keyboard': [[{'text': '‚óÄÔ∏è –ö –æ—Ç—á–µ—Ç–∞–º', 'callback_data': 'reports'}]]},
        parse_mode='Markdown'
    )


def handle_report_callback(user_id, message_id, callback_data, api: TelegramAPI):
    """–†–æ—É—Ç–µ—Ä –¥–ª—è callback'–æ–≤ –æ—Ç—á–µ—Ç–æ–≤"""
    
    if callback_data == 'reports':
        return handle_reports_menu_callback(user_id, message_id, api)
    
    elif callback_data == 'report_quality':
        return handle_quality_report(user_id, message_id, api)
    
    elif callback_data == 'report_time':
        return handle_time_report(user_id, message_id, api)
    
    elif callback_data == 'report_tasks':
        return handle_tasks_report(user_id, message_id, api)
    
    elif callback_data == 'report_general':
        return handle_general_report(user_id, message_id, api)
    
    else:
        return api.edit_message(
            user_id,
            message_id,
            f"‚ùì –§—É–Ω–∫—Ü–∏—è `{callback_data}` –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
            reply_markup={'inline_keyboard': [[{'text': '‚óÄÔ∏è –ö –æ—Ç—á–µ—Ç–∞–º', 'callback_data': 'reports'}]]}
        )
