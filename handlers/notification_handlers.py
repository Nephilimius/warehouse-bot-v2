#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
handlers/notification_handlers.py
–•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
"""

import logging
from .utils import TelegramAPI
from .database_api import db
from .keyboards import get_notifications_menu, get_back_button
from .main_handlers import set_user_state, get_user_states

logger = logging.getLogger(__name__)


def handle_notifications_menu_text(user_id, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç"""
    
    is_admin = db.is_admin(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    settings = db.get_notification_settings(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    notifications = db.get_user_notifications(user_id, 50)
    unread_count = len([n for n in notifications if not n.get('is_read', True)])
    
    message = f"""üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è*

üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ –í—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {len(notifications)}
‚Ä¢ –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö: {unread_count}

‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏:*"""
    
    if settings:
        status_emoji = lambda x: "‚úÖ" if x else "‚ùå"
        message += f"""
‚Ä¢ –û–±—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {status_emoji(settings.get('general_notifications', True))}
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–¥–∞—á–∞—Ö: {status_emoji(settings.get('task_reminders', True))}
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {status_emoji(settings.get('schedule_updates', True))}
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–π—Ç–∏–Ω–≥–µ: {status_emoji(settings.get('rating_notifications', True))}"""
    else:
        message += "\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"
    
    message += "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    return api.send_message(
        user_id,
        message,
        reply_markup=get_notifications_menu(is_admin),
        parse_mode='Markdown'
    )


def handle_notifications_menu_callback(user_id, message_id, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ callback"""
    
    is_admin = db.is_admin(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    settings = db.get_notification_settings(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    notifications = db.get_user_notifications(user_id, 50)
    unread_count = len([n for n in notifications if not n.get('is_read', True)])
    
    message = f"""üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è*

üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ –í—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {len(notifications)}
‚Ä¢ –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö: {unread_count}

‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏:*"""
    
    if settings:
        status_emoji = lambda x: "‚úÖ" if x else "‚ùå"
        message += f"""
‚Ä¢ –û–±—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {status_emoji(settings.get('general_notifications', True))}
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–¥–∞—á–∞—Ö: {status_emoji(settings.get('task_reminders', True))}
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {status_emoji(settings.get('schedule_updates', True))}
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–π—Ç–∏–Ω–≥–µ: {status_emoji(settings.get('rating_notifications', True))}"""
    else:
        message += "\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"
    
    message += "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    return api.edit_message(
        user_id,
        message_id,
        message,
        reply_markup=get_notifications_menu(is_admin),
        parse_mode='Markdown'
    )


def handle_my_notifications(user_id, message_id, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    notifications = db.get_user_notifications(user_id, 10)
    
    if notifications:
        message = "üì± *–í–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è* (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)\n\n"
        
        for i, notif in enumerate(notifications):
            status = "üîπ" if notif.get('is_read', True) else "üî∏"
            date = notif.get('created_at', '')[:16] if notif.get('created_at') else ''
            
            message += f"{status} *{notif.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}*\n"
            message += f"üìÖ {date}\n"
            
            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            text = notif.get('message', '')
            if len(text) > 60:
                text = text[:60] + "..."
            message += f"üí¨ {text}\n\n"
            
            if i >= 9:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10
                break
    else:
        message = "üì± *–í–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è*\n\n‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
    
    return api.edit_message(
        user_id, message_id, message,
        reply_markup={'inline_keyboard': [[{'text': '‚óÄÔ∏è –ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º', 'callback_data': 'notifications'}]]},
        parse_mode='Markdown'
    )


def handle_notification_settings(user_id, message_id, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    settings = db.get_notification_settings(user_id)
    
    if settings:
        keyboard = [
            [{'text': f"{'‚úÖ' if settings.get('general_notifications', True) else '‚ùå'} –û–±—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", 
              'callback_data': 'toggle_general_notifications'}],
            [{'text': f"{'‚úÖ' if settings.get('task_reminders', True) else '‚ùå'} –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–¥–∞—á–∞—Ö", 
              'callback_data': 'toggle_task_reminders'}],
            [{'text': f"{'‚úÖ' if settings.get('schedule_updates', True) else '‚ùå'} –û–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", 
              'callback_data': 'toggle_schedule_updates'}],
            [{'text': f"{'‚úÖ' if settings.get('rating_notifications', True) else '‚ùå'} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–π—Ç–∏–Ω–≥–µ", 
              'callback_data': 'toggle_rating_notifications'}],
            [{'text': '‚óÄÔ∏è –ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º', 'callback_data': 'notifications'}]
        ]
        
        message = "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
    else:
        keyboard = [[{'text': '‚óÄÔ∏è –ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º', 'callback_data': 'notifications'}]]
        message = "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"
    
    return api.edit_message(
        user_id, message_id, message,
        reply_markup={'inline_keyboard': keyboard},
        parse_mode='Markdown'
    )


def handle_send_notification_all_text(user_id, text, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    
    if text.strip():
        sent_count = db.send_notification_to_all_users("üì¢ –û–±—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", text.strip())
        set_user_state(user_id, 'main')
        
        from .keyboards import get_reply_keyboard
        
        return api.send_message(
            user_id,
            f"‚úÖ *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!*\n\nüìä –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {sent_count}\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {text[:100]}{'...' if len(text) > 100 else ''}",
            reply_markup=get_reply_keyboard(db.is_admin(user_id)),
            parse_mode='Markdown'
        )
    else:
        return api.send_message(user_id, "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")


def handle_send_notification_role_text(user_id, text, current_state, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —Ä–æ–ª–∏"""
    
    role = current_state.replace('admin_send_notification_role_', '')
    
    if text.strip():
        sent_count = db.send_notification_to_all_users(f"üéØ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {role}", text.strip(), role)
        set_user_state(user_id, 'main')
        
        from .utils import get_role_emoji
        from .keyboards import get_reply_keyboard
        
        role_emoji = get_role_emoji(role)
        
        return api.send_message(
            user_id,
            f"‚úÖ *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!*\n\nüéØ –†–æ–ª—å: {role_emoji} {role}\nüìä –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {sent_count}\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {text[:100]}{'...' if len(text) > 100 else ''}",
            reply_markup=get_reply_keyboard(db.is_admin(user_id)),
            parse_mode='Markdown'
        )
    else:
        return api.send_message(user_id, "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")


def handle_notification_callback(user_id, message_id, callback_data, api: TelegramAPI):
    """–†–æ—É—Ç–µ—Ä –¥–ª—è callback'–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    if callback_data == 'notifications':
        return handle_notifications_menu_callback(user_id, message_id, api)
    
    elif callback_data == 'my_notifications':
        return handle_my_notifications(user_id, message_id, api)
    
    elif callback_data == 'notification_settings':
        return handle_notification_settings(user_id, message_id, api)
    
    elif callback_data == 'send_notification_all':
        if not db.is_admin(user_id):
            return api.edit_message(user_id, message_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        
        set_user_state(user_id, 'admin_send_notification_all')
        return api.edit_message(
            user_id, message_id,
            "üì¢ *–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º*\n\n–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:\n\n_–ò–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã_",
            parse_mode='Markdown'
        )
    
    elif callback_data == 'send_notification_role':
        if not db.is_admin(user_id):
            return api.edit_message(user_id, message_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        
        keyboard = [
            [{'text': 'üëë –¢–æ–ª—å–∫–æ –î–°', 'callback_data': 'send_to_role_–î–°'}],
            [{'text': 'üéñÔ∏è –¢–æ–ª—å–∫–æ –ó–î–°', 'callback_data': 'send_to_role_–ó–î–°'}],
            [{'text': 'üë∑ –¢–æ–ª—å–∫–æ –ö–ª–∞–¥–æ–≤—â–∏–∫–∏', 'callback_data': 'send_to_role_–ö–ª–∞–¥–æ–≤—â–∏–∫'}],
            [{'text': '‚óÄÔ∏è –ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º', 'callback_data': 'notifications'}]
        ]
        
        return api.edit_message(
            user_id, message_id,
            "üéØ *–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–æ–ª–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:",
            reply_markup={'inline_keyboard': keyboard},
            parse_mode='Markdown'
        )
    
    elif callback_data.startswith('send_to_role_'):
        if not db.is_admin(user_id):
            return api.edit_message(user_id, message_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        
        role = callback_data.replace('send_to_role_', '')
        set_user_state(user_id, f'admin_send_notification_role_{role}')
        
        from .utils import get_role_emoji
        role_emoji = get_role_emoji(role)
        
        return api.edit_message(
            user_id, message_id,
            f"üéØ *–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {role_emoji} {role}*\n\n–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:\n\n_–ò–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã_",
            parse_mode='Markdown'
        )
    
    elif callback_data.startswith('toggle_'):
        setting_name = callback_data.replace('toggle_', '')
        settings = db.get_notification_settings(user_id)
        
        if settings:
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
            new_value = not settings.get(setting_name, True)
            settings[setting_name] = new_value
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            success = db.update_notification_settings(user_id, settings)
            
            if success:
                # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
                return handle_notification_settings(user_id, message_id, api)
            else:
                return api.edit_message(
                    user_id, message_id,
                    "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫",
                    reply_markup={'inline_keyboard': [[{'text': '‚óÄÔ∏è –ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º', 'callback_data': 'notifications'}]]}
                )
        else:
            return api.edit_message(
                user_id, message_id,
                "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫",
                reply_markup={'inline_keyboard': [[{'text': '‚óÄÔ∏è –ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º', 'callback_data': 'notifications'}]]}
            )
    
    else:
        return api.edit_message(
            user_id,
            message_id,
            f"‚ùì –§—É–Ω–∫—Ü–∏—è `{callback_data}` –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
            reply_markup={'inline_keyboard': [[{'text': '‚óÄÔ∏è –ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º', 'callback_data': 'notifications'}]]}
        )
