#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
handlers/notification_handlers.py
–•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
"""

import logging
from .utils import TelegramAPI, is_admin, get_role_emoji
import database as db
from .keyboards import get_notifications_menu

logger = logging.getLogger(__name__)


def handle_notifications_menu_text(user_id, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç"""
    is_admin_user = is_admin(user_id)
    return api.send_message(
        user_id,
        "üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_notifications_menu(is_admin_user),
        parse_mode='Markdown'
    )


def handle_notifications_menu_callback(user_id, message_id, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ callback"""
    is_admin_user = is_admin(user_id)
    return api.edit_message(
        user_id,
        message_id,
        "üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_notifications_menu(is_admin_user),
        parse_mode='Markdown'
    )


def handle_my_notifications(user_id, message_id, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    notifications = db.get_user_notifications(user_id, 10)
    
    if notifications:
        message = "üì± *–í–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è* (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)\n\n"
        for i, notif in enumerate(notifications):
            status = "üîπ" if notif.get('is_read', True) else "üî∏"
            date = notif.get('created_at', '')[:16] if notif.get('created_at') else ''
            message += f"{status} *{notif.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}*\n"
            message += f"üìÖ {date}\n"
            text = notif.get('message', '')
            if len(text) > 60: text = text[:60] + "..."
            message += f"üí¨ {text}\n\n"
    else:
        message = "üì± *–í–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è*\n\n‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."
    
    return api.edit_message(
        user_id, message_id, message,
        reply_markup={'inline_keyboard': [[{'text': '‚óÄÔ∏è –ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º', 'callback_data': 'notifications'}]]},
        parse_mode='Markdown'
    )


def handle_notification_settings(user_id, message_id, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    settings = db.get_notification_settings(user_id)
    
    if settings:
        keyboard = [
            [{'text': f"{'‚úÖ' if settings.get('general_notifications', True) else '‚ùå'} –û–±—â–∏–µ", 'callback_data': 'notifications_toggle_general'}],
            [{'text': f"{'‚úÖ' if settings.get('task_reminders', True) else '‚ùå'} –û –∑–∞–¥–∞—á–∞—Ö", 'callback_data': 'notifications_toggle_task'}],
            [{'text': f"{'‚úÖ' if settings.get('schedule_updates', True) else '‚ùå'} –û —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏", 'callback_data': 'notifications_toggle_schedule'}],
            [{'text': f"{'‚úÖ' if settings.get('rating_notifications', True) else '‚ùå'} –û —Ä–µ–π—Ç–∏–Ω–≥–µ", 'callback_data': 'notifications_toggle_rating'}],
            [{'text': '‚óÄÔ∏è –ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º', 'callback_data': 'notifications'}]
        ]
        message = "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
    else:
        keyboard = [[{'text': '‚óÄÔ∏è –ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º', 'callback_data': 'notifications'}]]
        message = "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫."
    
    return api.edit_message(
        user_id, message_id, message,
        reply_markup={'inline_keyboard': keyboard},
        parse_mode='Markdown'
    )


def handle_text_message_notification(user_id, text, state, data, api: TelegramAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    if text.lower() == '/cancel':
        db.set_user_state(user_id, 'main', {})
        return api.send_message(user_id, "–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º
    if state == 'notifications_send_all':
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º
        db.set_user_state(user_id, 'main', {})
        return api.send_message(user_id, f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º!\n\n_{text}_", parse_mode='Markdown')
        
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–æ–ª–∏
    elif state.startswith('notifications_send_role_'):
        role = state.replace('notifications_send_role_', '')
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ —Ä–æ–ª–∏
        db.set_user_state(user_id, 'main', {})
        return api.send_message(user_id, f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–æ–ª–∏ *{role}*!\n\n_{text}_", parse_mode='Markdown')
    
    return api.send_message(user_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")


def handle_notification_callback(user_id, message_id, query_id, callback_data, api: TelegramAPI):
    """–†–æ—É—Ç–µ—Ä –¥–ª—è callback'–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    api.answer_callback_query(query_id) # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback

    if callback_data == 'notifications_my':
        return handle_my_notifications(user_id, message_id, api)
    
    elif callback_data == 'notifications_settings':
        return handle_notification_settings(user_id, message_id, api)
    
    elif callback_data == 'notifications_send_all':
        if not is_admin(user_id): return api.edit_message(user_id, message_id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        db.set_user_state(user_id, 'notifications_send_all', {})
        return api.edit_message(user_id, message_id, "üì¢ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è *–≤—Å–µ—Ö* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", parse_mode='Markdown')

    elif callback_data == 'notifications_send_role':
        if not is_admin(user_id): return api.edit_message(user_id, message_id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        keyboard = [
            [{'text': f'{get_role_emoji("–î–°")} –î–°', 'callback_data': 'notifications_select_role_–î–°'}],
            [{'text': f'{get_role_emoji("–ó–î–°")} –ó–î–°', 'callback_data': 'notifications_select_role_–ó–î–°'}],
            [{'text': f'{get_role_emoji("–ö–ª–∞–¥–æ–≤—â–∏–∫")} –ö–ª–∞–¥–æ–≤—â–∏–∫–∏', 'callback_data': 'notifications_select_role_–ö–ª–∞–¥–æ–≤—â–∏–∫'}],
            [{'text': '‚óÄÔ∏è –ù–∞–∑–∞–¥', 'callback_data': 'notifications'}]
        ]
        return api.edit_message(user_id, message_id, "üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:", reply_markup={'inline_keyboard': keyboard})

    elif callback_data.startswith('notifications_select_role_'):
        role = callback_data.replace('notifications_select_role_', '')
        db.set_user_state(user_id, f'notifications_send_role_{role}')
        return api.edit_message(user_id, message_id, f"üéØ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–æ–ª–∏ *{role}*:", parse_mode='Markdown')

    elif callback_data.startswith('notifications_toggle_'):
        setting_name = callback_data.replace('notifications_toggle_', '')
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        return handle_notification_settings(user_id, message_id, api) # –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é

    # –ï—Å–ª–∏ –º—ã –∑–¥–µ—Å—å, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ 'notifications' - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞
    return handle_notifications_menu_callback(user_id, message_id, api)
