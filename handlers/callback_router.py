#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
handlers/callback_router.py
–ì–ª–∞–≤–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –∑–∞–ø—Ä–æ—Å–æ–≤
"""

import logging
from .utils import TelegramAPI
from .database_api import DatabaseAPI
from .keyboards import get_main_menu_keyboard
from .main_handlers import set_user_state

logger = logging.getLogger(__name__)


def handle_callback_query(user_id, callback_data, message_id, query_id, api: TelegramAPI):
    """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback queries"""
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    api.answer_callback_query(query_id)
    
    is_admin = DatabaseAPI.is_admin(user_id)
    
    try:
        logger.info(f"üîò –û–±—Ä–∞–±–æ—Ç–∫–∞ callback: {callback_data} –æ—Ç {user_id}")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
        if callback_data == 'search':
            set_user_state(user_id, 'search')
            return api.edit_message(
                user_id,
                message_id,
                "üîç *–ü–æ–∏—Å–∫ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n–í–≤–µ–¥–∏—Ç–µ username –¥–ª—è –ø–æ–∏—Å–∫–∞:"
            )
        
        elif callback_data == 'profile':
            from .main_handlers import handle_profile_text
            # –î–ª—è callback –∏—Å–ø–æ–ª—å–∑—É–µ–º edit_message
            user = DatabaseAPI.get_or_create_user(user_id)
            
            if user:
                admin_status = "\nüëë *–°—Ç–∞—Ç—É—Å:* –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if is_admin else ""
                
                message = f"""üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*

üì± *Username:* @{user.get('username', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üé≠ *–†–æ–ª—å:* {user.get('role', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}{admin_status}
üìã *–ó–∞–¥–∞–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:* {user.get('tasks_count', 0)}
‚≠ê *–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥:* {user.get('average_rating', 0):.1f}
üíé *–ö–∞—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã:* {user.get('quality_score', 0):.1f}
üÜî *ID:* {user_id}"""
            else:
                message = f"üë§ *–ü—Ä–æ—Ñ–∏–ª—å*\n\n‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö\nüÜî *ID:* {user_id}"
            
            return api.edit_message(
                user_id, message_id, message,
                reply_markup={'inline_keyboard': [[{'text': '‚óÄÔ∏è –ù–∞–∑–∞–¥', 'callback_data': 'back_main'}]]},
                parse_mode='Markdown'
            )
        
        elif callback_data == 'back_main':
            set_user_state(user_id, 'main')
            return api.edit_message(
                user_id,
                message_id,
                "üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
            )
        
        # –ó–∞–¥–∞–Ω–∏—è
        elif callback_data.startswith(('tasks', 'my_tasks', 'pending_tasks', 'completed_tasks', 'all_stats')):
            from .task_handlers import handle_task_callback
            return handle_task_callback(user_id, message_id, callback_data, api)
        
        # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        elif callback_data.startswith(('schedule', 'schedule_')):
            from .schedule_handlers import handle_schedule_callback
            return handle_schedule_callback(user_id, message_id, callback_data, api)
        
        # –û—Ç—á–µ—Ç—ã
        elif callback_data.startswith(('reports', 'report_')):
            from .report_handlers import handle_report_callback
            return handle_report_callback(user_id, message_id, callback_data, api)
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        elif callback_data.startswith(('notifications', 'my_notifications', 'notification_', 'send_', 'toggle_')):
            from .notification_handlers import handle_notification_callback
            return handle_notification_callback(user_id, message_id, callback_data, api)
        
        # –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        elif callback_data.startswith('admin') and is_admin:
            from .admin_handlers import handle_admin_callback
            return handle_admin_callback(user_id, message_id, callback_data, api)
        
        elif callback_data.startswith('admin') and not is_admin:
            return api.edit_message(
                user_id,
                message_id,
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
            )
        
        # –§—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
        elif callback_data.startswith(('delete_item_', 'confirm_delete_', 'cancel_delete_')) and is_admin:
            from .admin_handlers import handle_admin_callback
            return handle_admin_callback(user_id, message_id, callback_data, api)
        
        elif callback_data.startswith(('delete_item_', 'confirm_delete_', 'cancel_delete_')) and not is_admin:
            return api.edit_message(
                user_id, message_id,
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
            )
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        else:
            logger.warning(f"‚ö†Ô∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è callback_data: {callback_data}")
            return api.edit_message(
                user_id,
                message_id,
                f"‚ùì –§—É–Ω–∫—Ü–∏—è `{callback_data}` –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
                reply_markup={'inline_keyboard': [[{'text': '‚óÄÔ∏è –ù–∞–∑–∞–¥', 'callback_data': 'back_main'}]]}
            )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_callback_query: {e}")
        import traceback
        traceback.print_exc()
        
        # Fallback –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        return api.edit_message(
            user_id,
            message_id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=get_main_menu_keyboard(is_admin)
        )
