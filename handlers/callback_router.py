#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
handlers/callback_router.py
–ì–ª–∞–≤–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback requests - –û–¢–õ–ê–î–û–ß–ù–ê–Ø –í–ï–†–°–ò–Ø
"""

import logging

logger = logging.getLogger(__name__)


def handle_callback_query(user_id, callback_data, message_id, query_id, api):
    """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback queries - –û–¢–õ–ê–î–û–ß–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    
    logger.info(f"üîò –í–•–û–î –í handle_callback_query: user={user_id}, data='{callback_data}', msg_id={message_id}")
    
    # –ù–ï –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –∑–¥–µ—Å—å - —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è –≤ bot_modular.py
    
    from config import ADMINS
    is_admin = user_id in ADMINS
    
    logger.info(f"üîò –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} {'–ê–î–ú–ò–ù' if is_admin else '–ù–ï –ê–î–ú–ò–ù'}")
    
    try:
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
        if callback_data == 'search':
            logger.info("üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ callback: search")
            try:
                from .main_handlers import set_user_state
                set_user_state(user_id, 'search')
                success, result = api.edit_message(
                    user_id,
                    message_id,
                    "üîç *–ü–æ–∏—Å–∫ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n–í–≤–µ–¥–∏—Ç–µ username –¥–ª—è –ø–æ–∏—Å–∫–∞:",
                    parse_mode='Markdown'
                )
                logger.info(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç edit_message: success={success}")
                return success, result
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ search callback: {e}")
                return False, str(e)
        
        elif callback_data == 'profile':
            logger.info("üë§ –û–±—Ä–∞–±–æ—Ç–∫–∞ callback: profile")
            try:
                from .main_handlers import get_or_create_user_sync
                # –î–ª—è callback –∏—Å–ø–æ–ª—å–∑—É–µ–º edit_message
                user = get_or_create_user_sync(user_id)
                
                if user:
                    admin_status = "\nüëë *–°—Ç–∞—Ç—É—Å:* –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if is_admin else ""
                    
                    message = f"""üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*

üì± *Username:* @{user.get('username', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üé≠ *–†–æ–ª—å:* {user.get('role', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}{admin_status}
üìã *–ó–∞–¥–∞–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:* {user.get('tasks_count', 0)}
‚≠ê *–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥:* {user.get('average_rating', 0):.1f}
üíé *–ö–∞—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã:* {user.get('quality_score', 0):.1f}
üÜî *ID:* {user_id}"""
                else:
                    message = f"üë§ *–ü—Ä–æ—Ñ–∏–ª—å*\n\n‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö\nüÜî *ID:* {user_id}"
                
                success, result = api.edit_message(
                    user_id, message_id, message,
                    reply_markup={'inline_keyboard': [[{'text': '‚óÄÔ∏è –ù–∞–∑–∞–¥', 'callback_data': 'back_main'}]]},
                    parse_mode='Markdown'
                )
                logger.info(f"üë§ –†–µ–∑—É–ª—å—Ç–∞—Ç edit_message: success={success}")
                return success, result
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ profile callback: {e}")
                return False, str(e)
        
        elif callback_data == 'back_main':
            logger.info("üè† –û–±—Ä–∞–±–æ—Ç–∫–∞ callback: back_main")
            try:
                from .main_handlers import set_user_state, get_main_menu_keyboard
                set_user_state(user_id, 'main')
                success, result = api.edit_message(
                    user_id,
                    message_id,
                    "üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
                    reply_markup=get_main_menu_keyboard(is_admin),
                    parse_mode='Markdown'
                )
                logger.info(f"üè† –†–µ–∑—É–ª—å—Ç–∞—Ç edit_message: success={success}")
                return success, result
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ back_main callback: {e}")
                return False, str(e)
        
        # –ó–∞–¥–∞–Ω–∏—è
        elif callback_data == 'tasks':
            logger.info("üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ callback: tasks")
            try:
                from .main_handlers import get_tasks_menu
                success, result = api.edit_message(
                    user_id,
                    message_id,
                    "üìÑ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=get_tasks_menu(is_admin),
                    parse_mode='Markdown'
                )
                logger.info(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç edit_message: success={success}")
                return success, result
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ tasks callback: {e}")
                return False, str(e)
        
        elif callback_data == 'my_tasks':
            logger.info("üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ callback: my_tasks")
            return handle_my_tasks_callback(user_id, message_id, api)
        
        elif callback_data == 'pending_tasks':
            logger.info("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ callback: pending_tasks")
            return handle_pending_tasks_callback(user_id, message_id, api, is_admin)
        
        elif callback_data == 'completed_tasks':
            logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ callback: completed_tasks")
            return handle_completed_tasks_callback(user_id, message_id, api, is_admin)
        
        # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        elif callback_data == 'schedule':
            logger.info("üóìÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ callback: schedule")
            try:
                from .main_handlers import get_schedule_menu
                success, result = api.edit_message(
                    user_id,
                    message_id,
                    "üóìÔ∏è *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
                    reply_markup=get_schedule_menu(),
                    parse_mode='Markdown'
                )
                logger.info(f"üóìÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç edit_message: success={success}")
                return success, result
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ schedule callback: {e}")
                return False, str(e)
        
        elif callback_data in ['schedule_meals', 'schedule_cleaning', 'schedule_counting']:
            logger.info(f"üóìÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ callback —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {callback_data}")
            return handle_schedule_type_callback(user_id, message_id, callback_data, api)
        
        # –û—Ç—á–µ—Ç—ã
        elif callback_data == 'reports':
            logger.info("üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ callback: reports")
            try:
                from .main_handlers import get_reports_menu
                success, result = api.edit_message(
                    user_id,
                    message_id,
                    "üìä *–û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:",
                    reply_markup=get_reports_menu(),
                    parse_mode='Markdown'
                )
                logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç edit_message: success={success}")
                return success, result
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ reports callback: {e}")
                return False, str(e)
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        elif callback_data == 'notifications':
            logger.info("üîî –û–±—Ä–∞–±–æ—Ç–∫–∞ callback: notifications")
            try:
                from .main_handlers import get_notifications_menu
                success, result = api.edit_message(
                    user_id,
                    message_id,
                    "üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=get_notifications_menu(is_admin),
                    parse_mode='Markdown'
                )
                logger.info(f"üîî –†–µ–∑—É–ª—å—Ç–∞—Ç edit_message: success={success}")
                return success, result
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ notifications callback: {e}")
                return False, str(e)
        
        # –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        elif callback_data == 'admin' and is_admin:
            logger.info("üëë –û–±—Ä–∞–±–æ—Ç–∫–∞ callback: admin")
            try:
                from .main_handlers import get_admin_menu
                success, result = api.edit_message(
                    user_id,
                    message_id,
                    "üëë *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=get_admin_menu(),
                    parse_mode='Markdown'
                )
                logger.info(f"üëë –†–µ–∑—É–ª—å—Ç–∞—Ç edit_message: success={success}")
                return success, result
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ admin callback: {e}")
                return False, str(e)
        
        elif callback_data.startswith('admin') and not is_admin:
            logger.warning(f"üö´ –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ –æ—Ç {user_id}")
            success, result = api.edit_message(
                user_id,
                message_id,
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
            )
            return success, result
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        else:
            logger.warning(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è callback_data: '{callback_data}'")
            success, result = api.edit_message(
                user_id,
                message_id,
                f"‚ùì –§—É–Ω–∫—Ü–∏—è `{callback_data}` –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
                reply_markup={'inline_keyboard': [[{'text': '‚óÄÔ∏è –ù–∞–∑–∞–¥', 'callback_data': 'back_main'}]]}
            )
            return success, result
        
    except Exception as e:
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –æ—à–∏–±–∫–∞ –≤ handle_callback_query: {e}")
        import traceback
        traceback.print_exc()
        
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            success, result = api.edit_message(
                user_id,
                message_id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                reply_markup={'inline_keyboard': [[{'text': 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data': 'back_main'}]]}
            )
            return success, result
        except:
            return False, "Critical error in callback handler"


def handle_my_tasks_callback(user_id, message_id, api):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–æ–∏—Ö –∑–∞–¥–∞—á"""
    logger.info(f"üìù handle_my_tasks_callback –¥–ª—è {user_id}")
    
    try:
        # –ó–∞–≥–ª—É—à–∫–∞ - –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        success, result = api.edit_message(
            user_id,
            message_id,
            "üìù *–í–∞—à–∏ –∑–∞–¥–∞–Ω–∏—è*\n\n‚ùå –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n\n_–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö..._",
            reply_markup={'inline_keyboard': [[{'text': '‚óÄÔ∏è –ö –∑–∞–¥–∞–Ω–∏—è–º', 'callback_data': 'tasks'}]]},
            parse_mode='Markdown'
        )
        logger.info(f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç: success={success}")
        return success, result
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_my_tasks_callback: {e}")
        return False, str(e)


def handle_pending_tasks_callback(user_id, message_id, api, is_admin):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–¥–∞—á"""
    logger.info(f"‚è≥ handle_pending_tasks_callback –¥–ª—è {user_id}, –∞–¥–º–∏–Ω: {is_admin}")
    
    try:
        title = "‚è≥ *–í—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–¥–∞–Ω–∏—è*" if is_admin else "‚è≥ *–í–∞—à–∏ –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–¥–∞–Ω–∏—è*"
        success, result = api.edit_message(
            user_id,
            message_id,
            f"{title}\n\n‚ùå –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n\n_–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö..._",
            reply_markup={'inline_keyboard': [[{'text': '‚óÄÔ∏è –ö –∑–∞–¥–∞–Ω–∏—è–º', 'callback_data': 'tasks'}]]},
            parse_mode='Markdown'
        )
        logger.info(f"‚è≥ –†–µ–∑—É–ª—å—Ç–∞—Ç: success={success}")
        return success, result
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_pending_tasks_callback: {e}")
        return False, str(e)


def handle_completed_tasks_callback(user_id, message_id, api, is_admin):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
    logger.info(f"‚úÖ handle_completed_tasks_callback –¥–ª—è {user_id}, –∞–¥–º–∏–Ω: {is_admin}")
    
    try:
        title = "‚úÖ *–í—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è*" if is_admin else "‚úÖ *–í–∞—à–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è*"
        success, result = api.edit_message(
            user_id,
            message_id,
            f"{title}\n\n‚ùå –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n\n_–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö..._",
            reply_markup={'inline_keyboard': [[{'text': '‚óÄÔ∏è –ö –∑–∞–¥–∞–Ω–∏—è–º', 'callback_data': 'tasks'}]]},
            parse_mode='Markdown'
        )
        logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: success={success}")
        return success, result
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_completed_tasks_callback: {e}")
        return False, str(e)


def handle_schedule_type_callback(user_id, message_id, callback_data, api):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    logger.info(f"üóìÔ∏è handle_schedule_type_callback: {callback_data}")
    
    type_mapping = {
        'schedule_meals': '–û–±–µ–¥—ã',
        'schedule_cleaning': '–£–±–æ—Ä–∫–∞', 
        'schedule_counting': '–ü–µ—Ä–µ—Å—á–µ—Ç—ã'
    }
    
    schedule_type = type_mapping.get(callback_data, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    type_emoji = get_task_type_emoji(schedule_type)
    
    try:
        success, result = api.edit_message(
            user_id,
            message_id,
            f"{type_emoji} *{schedule_type}*\n\n‚ùå –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n\n_–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö..._",
            reply_markup={'inline_keyboard': [[{'text': '‚óÄÔ∏è –ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é', 'callback_data': 'schedule'}]]},
            parse_mode='Markdown'
        )
        logger.info(f"üóìÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç: success={success}")
        return success, result
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_schedule_type_callback: {e}")
        return False, str(e)


def get_task_type_emoji(task_type):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏"""
    return {
        "–û–±–µ–¥—ã": "üçΩÔ∏è",
        "–£–±–æ—Ä–∫–∞": "üßπ", 
        "–ü–µ—Ä–µ—Å—á–µ—Ç—ã": "üî¢"
    }.get(task_type, "üìã")