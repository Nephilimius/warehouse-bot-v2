#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤ –≤ .env —Ñ–∞–π–ª
–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
"""

import os
import json
import shutil
from datetime import datetime


def backup_files():
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Ñ–∞–π–ª–æ–≤"""
    backup_dir = f"backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    os.makedirs(backup_dir, exist_ok=True)
    
    files_to_backup = [
        'config.py', 
        'database.py', 
        'ydb_init.py', 
        'requirements.txt',
        'ydb_key.json'
    ]
    
    for file in files_to_backup:
        if os.path.exists(file):
            shutil.copy2(file, backup_dir)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {file} -> {backup_dir}/{file}")
    
    print(f"üìÅ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ: {backup_dir}")
    return backup_dir


def create_env_file():
    """–°–æ–∑–¥–∞–µ—Ç .env —Ñ–∞–π–ª —Å–æ –≤—Å–µ–º–∏ —Å–µ–∫—Ä–µ—Ç–∞–º–∏"""
    
    env_content = '''# Telegram Bot Configuration
TELEGRAM_BOT_TOKEN=7811876172:AAGCf8OIvaUahvP4VuR2m5aWQ5xyQHLoCjI

# Yandex Cloud YDB Configuration
YDB_ENDPOINT=grpcs://ydb.serverless.yandexcloud.net:2135
YDB_DATABASE=/ru-central1/b1graibgsi8fsqjbu4v5/etna3daitvujf5j1p5ll
YDB_KEY_FILE=ydb_key.json

# Webhook Configuration
WEBHOOK_PORT=8080

# Admin Users (comma-separated IDs)
ADMIN_USERS=398232017,1014841100

# Environment
ENVIRONMENT=production
DEBUG=False
'''
    
    with open('.env', 'w', encoding='utf-8') as f:
        f.write(env_content)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª .env —Å —Å–µ–∫—Ä–µ—Ç–∞–º–∏")


def create_gitignore():
    """–°–æ–∑–¥–∞–µ—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç .gitignore"""
    
    gitignore_content = '''# Environment variables
.env
.env.local
.env.production

# YDB Key
ydb_key.json

# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
.hypothesis/
.pytest_cache/

# Virtual environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# IDEs
.vscode/
.idea/
*.swp
*.swo
*~

# OS
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Logs
*.log
logs/

# Backup files
backup_*/

# ngrok
ngrok
ngrok.exe
'''
    
    with open('.gitignore', 'w', encoding='utf-8') as f:
        f.write(gitignore_content)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª .gitignore")


def update_config_py():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç config.py –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å .env"""
    
    config_content = '''# config.py - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –±–æ—Ç–∞

import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
if not TOKEN:
    raise ValueError("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ YDB
YDB_ENDPOINT = os.getenv('YDB_ENDPOINT')
YDB_DATABASE = os.getenv('YDB_DATABASE')
YDB_KEY_FILE = os.getenv('YDB_KEY_FILE', 'ydb_key.json')

if not YDB_ENDPOINT or not YDB_DATABASE:
    raise ValueError("‚ùå YDB –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ!")

# Webhook –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
WEBHOOK_PORT = int(os.getenv('WEBHOOK_PORT', 8080))

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ .env)
admin_users_str = os.getenv('ADMIN_USERS', '398232017,1014841100')
ADMINS = [int(user_id.strip()) for user_id in admin_users_str.split(',') if user_id.strip()]

# –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'
ENVIRONMENT = os.getenv('ENVIRONMENT', 'development')

# States –¥–ª—è ConversationHandler
SEARCH, TASKS_MENU, SCHEDULE_MENU, REPORTS_MENU, NOTIF_MENU, PROFILE = range(6)
ADMIN_MENU, CHANGE_ROLE, DELETE_USER = range(7, 10)
USER_SEARCH = 11

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
SCHEDULE_MENU_ADMIN, SCHEDULE_VIEW, SCHEDULE_ADD, SCHEDULE_EDIT, SCHEDULE_DELETE = range(12, 17)
ADD_SCHEDULE_TYPE, ADD_SCHEDULE_USER, ADD_SCHEDULE_DATE, ADD_SCHEDULE_TIME = range(17, 21)
EDIT_SCHEDULE_SELECT, EDIT_SCHEDULE_FIELD, EDIT_SCHEDULE_VALUE = range(21, 24)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π
CREATE_TASK_TYPE, CREATE_TASK_USER, CREATE_TASK_TIME, CREATE_TASK_DESC, CREATE_TASK_SHELVES = range(50, 55)

# –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º –≤–≤–æ–¥–æ–º
SCHEDULE_SELECT_TYPE, SCHEDULE_SELECT_USER, SCHEDULE_INPUT_DATE, SCHEDULE_INPUT_TIME, SCHEDULE_INPUT_DETAILS, SCHEDULE_CONFIRM = range(100, 106)

# –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –∑–∞–¥–∞—á
TIME_SLOTS = {
    "–í —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è": "00:00-23:59",
    "09:00-12:00": "09:00-12:00", 
    "12:00-15:00": "12:00-15:00",
    "15:00-18:00": "15:00-18:00",
    "18:00-21:00": "18:00-21:00"
}

# –¢–∏–ø—ã –∑–∞–¥–∞—á
TASK_TYPES = {
    "–û–±–µ–¥—ã": "üçΩÔ∏è",
    "–£–±–æ—Ä–∫–∞": "üßπ", 
    "–ü–µ—Ä–µ—Å—á–µ—Ç—ã": "üî¢"
}

# –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–æ–ª–µ–π
ROLE_EMOJI = {
    "–î–°": "üëë",
    "–ó–î–°": "üéñÔ∏è", 
    "–ö–ª–∞–¥–æ–≤—â–∏–∫": "üë∑"
}

# –°—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á
TASK_STATUS = {
    "–û–∂–∏–¥–∞—é—â–µ–µ": "‚è≥",
    "–í —Ä–∞–±–æ—Ç–µ": "üîÑ", 
    "–í—ã–ø–æ–ª–Ω–µ–Ω–æ": "‚úÖ"
}

# –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def validate_config():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    errors = []
    
    if not TOKEN:
        errors.append("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    if not YDB_ENDPOINT:
        errors.append("‚ùå YDB_ENDPOINT –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
    if not YDB_DATABASE:
        errors.append("‚ùå YDB_DATABASE –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
    if not os.path.exists(YDB_KEY_FILE):
        errors.append(f"‚ùå –§–∞–π–ª {YDB_KEY_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    if not ADMINS:
        errors.append("‚ùå ADMIN_USERS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    if errors:
        print("\\n".join(errors))
        raise ValueError("–û—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!")
    
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
    print(f"ü§ñ –ë–æ—Ç: {TOKEN[:10]}...")
    print(f"üíæ –ë–∞–∑–∞: {YDB_DATABASE}")
    print(f"üëë –ê–¥–º–∏–Ω—ã: {len(ADMINS)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print(f"üåç –°—Ä–µ–¥–∞: {ENVIRONMENT}")

if __name__ == "__main__":
    validate_config()
'''
    
    with open('config.py', 'w', encoding='utf-8') as f:
        f.write(config_content)
    
    print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω config.py –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å .env")


def update_database_py():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç database.py –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å .env"""
    
    # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
    with open('database.py', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ó–∞–º–µ–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
    old_imports = '''# database.py - –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö YDB

import uuid
import ydb
import ydb.iam
from datetime import datetime
from config import YDB_ENDPOINT, YDB_DATABASE, YDB_KEY_FILE, ADMINS'''
    
    new_imports = '''# database.py - –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö YDB

import uuid
import ydb
import ydb.iam
from datetime import datetime
from config import YDB_ENDPOINT, YDB_DATABASE, YDB_KEY_FILE, ADMINS'''
    
    # –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ imports —É–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
    with open('database.py', 'w', encoding='utf-8') as f:
        f.write(content)
    
    print("‚úÖ database.py –≥–æ—Ç–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å .env")


def update_ydb_init_py():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç ydb_init.py –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å .env"""
    
    ydb_init_content = '''import uuid
from datetime import datetime, timedelta
import ydb
import ydb.iam
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ .env
YDB_ENDPOINT = os.getenv('YDB_ENDPOINT')
YDB_DATABASE = os.getenv('YDB_DATABASE')
YDB_KEY_FILE = os.getenv('YDB_KEY_FILE', 'ydb_key.json')

if not YDB_ENDPOINT or not YDB_DATABASE:
    raise ValueError("‚ùå YDB –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ!")

if not os.path.exists(YDB_KEY_FILE):
    raise FileNotFoundError(f"‚ùå –§–∞–π–ª –∫–ª—é—á–∞ {YDB_KEY_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω!")


def get_ydb_connection():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ YDB."""
    try:
        credentials = ydb.iam.ServiceAccountCredentials.from_file(YDB_KEY_FILE)
        driver = ydb.Driver(endpoint=YDB_ENDPOINT, database=YDB_DATABASE, credentials=credentials)
        driver.wait(timeout=30)
        pool = ydb.SessionPool(driver)
        return pool, driver
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ YDB: {e}")
        return None, None


def create_tables(pool):
    """–°–æ–∑–¥–∞—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã."""
    
    def execute(session):
        try:
            # –°–ø–∏—Å–æ–∫ SQL –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
            tables_queries = [
                """
                CREATE TABLE Users (
                    telegram_id String NOT NULL,
                    username String,
                    role String,
                    tasks_count Int32,
                    average_rating Double,
                    quality_score Double,
                    notifications_enabled Bool DEFAULT true,
                    created_at Timestamp DEFAULT CurrentUtcTimestamp(),
                    PRIMARY KEY (telegram_id)
                );
                """,
                """
                CREATE TABLE Tasks (
                    id String NOT NULL,
                    type String,
                    when_ String,
                    status String,
                    description String,
                    assigned_to String,
                    rating Int32,
                    time_spent Int32,
                    photo_file_id String,
                    created_by String,
                    created_at Timestamp DEFAULT CurrentUtcTimestamp(),
                    completed_at Timestamp,
                    PRIMARY KEY (id)
                );
                """,
                """
                CREATE TABLE Schedule (
                    id String NOT NULL,
                    user_id String,
                    date Date,
                    type String,
                    start_time String,
                    end_time String,
                    status String DEFAULT '–ê–∫—Ç–∏–≤–Ω–æ',
                    created_by String,
                    created_at Timestamp DEFAULT CurrentUtcTimestamp(),
                    PRIMARY KEY (id)
                );
                """,
                """
                CREATE TABLE Notifications (
                    id String NOT NULL,
                    user_id String,
                    title String,
                    message String,
                    type String,
                    is_read Bool DEFAULT false,
                    created_at Timestamp DEFAULT CurrentUtcTimestamp(),
                    scheduled_for Timestamp,
                    sent_at Timestamp,
                    PRIMARY KEY (id)
                );
                """,
                """
                CREATE TABLE NotificationSettings (
                    user_id String NOT NULL,
                    general_notifications Bool DEFAULT true,
                    task_reminders Bool DEFAULT true,
                    schedule_updates Bool DEFAULT true,
                    rating_notifications Bool DEFAULT true,
                    reminder_minutes_before Int32 DEFAULT 30,
                    work_hours_start String DEFAULT '09:00',
                    work_hours_end String DEFAULT '18:00',
                    PRIMARY KEY (user_id)
                );
                """,
                """
                CREATE TABLE WorkSchedule (
                    id String NOT NULL,
                    user_id String,
                    day_of_week Int32,
                    start_time String,
                    end_time String,
                    is_active Bool DEFAULT true,
                    created_by String,
                    updated_at Timestamp DEFAULT CurrentUtcTimestamp(),
                    PRIMARY KEY (id)
                );
                """,
                """
                CREATE TABLE TaskTypes (
                    id String NOT NULL,
                    name String,
                    category String,
                    default_duration Int32,
                    requires_photo Bool DEFAULT false,
                    description String,
                    PRIMARY KEY (id)
                );
                """,
                """
                CREATE TABLE Reports (
                    id String NOT NULL,
                    user_id String,
                    report_type String,
                    category String,
                    date_from Date,
                    date_to Date,
                    tasks_completed Int32,
                    average_rating Double,
                    average_time Int32,
                    quality_score Double,
                    delays_count Int32,
                    generated_at Timestamp DEFAULT CurrentUtcTimestamp(),
                    PRIMARY KEY (id)
                );
                """
            ]
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
            for i, query in enumerate(tables_queries):
                try:
                    session.transaction().execute(query, commit_tx=True)
                    print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {i+1}/{len(tables_queries)} —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                except Exception as e:
                    if "already exists" in str(e):
                        print(f"‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ {i+1}/{len(tables_queries)} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã {i+1}: {e}")
            
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
            return False
    
    try:
        return pool.retry_operation_sync(execute)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
        return False


def create_indexes(pool):
    """–°–æ–∑–¥–∞—Ç—å –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏."""
    
    def execute(session):
        try:
            indexes = [
                "CREATE INDEX idx_tasks_assigned_to ON Tasks (assigned_to);",
                "CREATE INDEX idx_tasks_status ON Tasks (status);",
                "CREATE INDEX idx_tasks_type ON Tasks (type);",
                "CREATE INDEX idx_schedule_user_date ON Schedule (user_id, date);",
                "CREATE INDEX idx_notifications_user_id ON Notifications (user_id);",
                "CREATE INDEX idx_notifications_scheduled ON Notifications (scheduled_for);",
                "CREATE INDEX idx_work_schedule_user ON WorkSchedule (user_id);",
            ]
            
            for i, index_query in enumerate(indexes):
                try:
                    session.transaction().execute(index_query, commit_tx=True)
                    print(f"‚úÖ –ò–Ω–¥–µ–∫—Å {i+1}/{len(indexes)} —Å–æ–∑–¥–∞–Ω")
                except Exception as e:
                    if "already exists" in str(e):
                        print(f"‚ö†Ô∏è  –ò–Ω–¥–µ–∫—Å {i+1}/{len(indexes)} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ {i+1}: {e}")
            
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤: {e}")
            return False
    
    try:
        return pool.retry_operation_sync(execute)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤: {e}")
        return False


def insert_test_data(pool):
    """–í—Å—Ç–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ."""
    
    def execute(session):
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø—ã –∑–∞–¥–∞—á
            task_types = [
                ("meal_1", "–û–±–µ–¥ 1 —Å–º–µ–Ω–∞", "–û–±–µ–¥—ã", 60, False, "–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –æ–±–µ–¥–∞ –¥–ª—è –ø–µ—Ä–≤–æ–π —Å–º–µ–Ω—ã"),
                ("meal_2", "–û–±–µ–¥ 2 —Å–º–µ–Ω–∞", "–û–±–µ–¥—ã", 60, False, "–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –æ–±–µ–¥–∞ –¥–ª—è –≤—Ç–æ—Ä–æ–π —Å–º–µ–Ω—ã"),
                ("cleaning_floors", "–£–±–æ—Ä–∫–∞ –ø–æ–ª–æ–≤", "–£–±–æ—Ä–∫–∞", 45, True, "–í–ª–∞–∂–Ω–∞—è —É–±–æ—Ä–∫–∞ –≤—Å–µ—Ö –ø–æ–ª–æ–≤ –≤ –∑–¥–∞–Ω–∏–∏"),
                ("cleaning_tables", "–£–±–æ—Ä–∫–∞ —Å—Ç–æ–ª–æ–≤", "–£–±–æ—Ä–∫–∞", 30, True, "–£–±–æ—Ä–∫–∞ –∏ –¥–µ–∑–∏–Ω—Ñ–µ–∫—Ü–∏—è —Ä–∞–±–æ—á–∏—Ö —Å—Ç–æ–ª–æ–≤"),
                ("cleaning_bathrooms", "–£–±–æ—Ä–∫–∞ —Å–∞–Ω—É–∑–ª–æ–≤", "–£–±–æ—Ä–∫–∞", 40, True, "–£–±–æ—Ä–∫–∞ –∏ –¥–µ–∑–∏–Ω—Ñ–µ–∫—Ü–∏—è —Å–∞–Ω—É–∑–ª–æ–≤"),
                ("recount", "–ü–µ—Ä–µ—Å—á–µ—Ç", "–ü–µ—Ä–µ—Å—á–µ—Ç—ã", 0, False, "–ü–µ—Ä–µ—Å—á–µ—Ç —Ç–æ–≤–∞—Ä–∞ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è"),
            ]
            
            for task_type in task_types:
                task_type_id = str(uuid.uuid4())
                insert_query = """
                    UPSERT INTO TaskTypes 
                    (id, name, category, default_duration, requires_photo, description)
                    VALUES ("{}", "{}", "{}", {}, {}, "{}")
                """.format(
                    task_type_id, task_type[1], task_type[2], 
                    task_type[3], task_type[4], task_type[5]
                )
                
                session.transaction().execute(insert_query, commit_tx=True)
            
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–∏–ø—ã –∑–∞–¥–∞—á –¥–æ–±–∞–≤–ª–µ–Ω—ã")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            test_users = [
                ("123456789", "director", "–î–°"),
                ("987654321", "assistant_director", "–ó–î–°"),
                ("111111111", "warehouse_worker1", "–ö–ª–∞–¥–æ–≤—â–∏–∫"),
                ("222222222", "warehouse_worker2", "–ö–ª–∞–¥–æ–≤—â–∏–∫"),
                ("333333333", "warehouse_worker3", "–ö–ª–∞–¥–æ–≤—â–∏–∫"),
            ]
            
            for user in test_users:
                insert_query = """
                    UPSERT INTO Users 
                    (telegram_id, username, role, tasks_count, 
                     average_rating, quality_score, notifications_enabled)
                    VALUES ("{}", "{}", "{}", {}, {}, {}, {})
                """.format(user[0], user[1], user[2], 0, 0.0, 0.0, True)
                
                session.transaction().execute(insert_query, commit_tx=True)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                notif_settings_query = """
                    UPSERT INTO NotificationSettings 
                    (user_id, general_notifications, task_reminders, 
                     schedule_updates, rating_notifications)
                    VALUES ("{}", {}, {}, {}, {})
                """.format(user[0], True, True, True, True)
                
                session.transaction().execute(notif_settings_query, commit_tx=True)
            
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            today = datetime.now().date()
            tomorrow = today + timedelta(days=1)
            
            schedule_items = [
                ("111111111", tomorrow, "–û–±–µ–¥—ã", "12:00", "13:00"),
                ("222222222", tomorrow, "–û–±–µ–¥—ã", "18:00", "19:00"),
                ("333333333", tomorrow, "–£–±–æ—Ä–∫–∞", "09:00", "10:00"),
                ("111111111", tomorrow, "–ü–µ—Ä–µ—Å—á–µ—Ç—ã", "14:00", "16:00"),
            ]
            
            for schedule in schedule_items:
                schedule_id = str(uuid.uuid4())
                insert_query = """
                    UPSERT INTO Schedule 
                    (id, user_id, date, type, start_time, end_time, created_by)
                    VALUES ("{}", "{}", Date("{}"), "{}", "{}", "{}", "{}")
                """.format(
                    schedule_id, schedule[0], schedule[1], 
                    schedule[2], schedule[3], schedule[4], "123456789"
                )
                
                session.transaction().execute(insert_query, commit_tx=True)
            
            print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
            
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    try:
        return pool.retry_operation_sync(execute)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏."""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö YDB...")
    print(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {YDB_ENDPOINT}")
    print(f"üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {YDB_DATABASE}")
    print(f"üîë –ö–ª—é—á: {YDB_KEY_FILE}")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ YDB
    pool, driver = get_ydb_connection()
    if not pool:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ YDB")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        print("\\nüìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
        if create_tables(pool):
            print("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
        print("\\nüîç –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...")
        if create_indexes(pool):
            print("‚úÖ –í—Å–µ –∏–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–æ–≤, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        print("\\nüìä –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        if insert_test_data(pool):
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        
        print("\\nüéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("\\nüìù –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:")
        print("- director (telegram_id: 123456789) - –î–°")
        print("- assistant_director (telegram_id: 987654321) - –ó–î–°")
        print("- warehouse_worker1 (telegram_id: 111111111) - –ö–ª–∞–¥–æ–≤—â–∏–∫")
        print("- warehouse_worker2 (telegram_id: 222222222) - –ö–ª–∞–¥–æ–≤—â–∏–∫")
        print("- warehouse_worker3 (telegram_id: 333333333) - –ö–ª–∞–¥–æ–≤—â–∏–∫")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
    finally:
        if driver:
            driver.stop()


if __name__ == '__main__':
    main()
'''
    
    with open('ydb_init.py', 'w', encoding='utf-8') as f:
        f.write(ydb_init_content)
    
    print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω ydb_init.py –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å .env")


def update_requirements():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç requirements.txt"""
    
    with open('requirements.txt', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –î–æ–±–∞–≤–ª—è–µ–º python-dotenv –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if 'python-dotenv' not in content:
        content += '\npython-dotenv==1.0.0\n'
    
    with open('requirements.txt', 'w', encoding='utf-8') as f:
        f.write(content)
    
    print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω python-dotenv –≤ requirements.txt")


def create_env_example():
    """–°–æ–∑–¥–∞–µ—Ç .env.example –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞"""
    
    env_example_content = '''# Telegram Bot Configuration
TELEGRAM_BOT_TOKEN=YOUR_BOT_TOKEN_HERE

# Yandex Cloud YDB Configuration
YDB_ENDPOINT=grpcs://ydb.serverless.yandexcloud.net:2135
YDB_DATABASE=/ru-central1/YOUR_FOLDER_ID/YOUR_DATABASE_ID
YDB_KEY_FILE=ydb_key.json

# Webhook Configuration
WEBHOOK_PORT=8080

# Admin Users (comma-separated IDs)
ADMIN_USERS=123456789,987654321

# Environment
ENVIRONMENT=production
DEBUG=False
'''
    
    with open('.env.example', 'w', encoding='utf-8') as f:
        f.write(env_example_content)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª .env.example –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
    
    print("üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –ú–ò–ì–†–ê–¶–ò–Æ –°–ï–ö–†–ï–¢–û–í –í .ENV")
    print("=" * 50)
    
    try:
        # 1. –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏
        print("\\nüìÅ –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π...")
        backup_dir = backup_files()
        
        # 2. –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª
        print("\\nüîê –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞...")
        create_env_file()
        
        # 3. –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º .gitignore
        print("\\nüö´ –®–∞–≥ 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ .gitignore...")
        create_gitignore()
        
        # 4. –û–±–Ω–æ–≤–ª—è–µ–º config.py
        print("\\n‚öôÔ∏è  –®–∞–≥ 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ config.py...")
        update_config_py()
        
        # 5. –û–±–Ω–æ–≤–ª—è–µ–º database.py
        print("\\nüíæ –®–∞–≥ 5: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ database.py...")
        update_database_py()
        
        # 6. –û–±–Ω–æ–≤–ª—è–µ–º ydb_init.py
        print("\\nüîß –®–∞–≥ 6: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ydb_init.py...")
        update_ydb_init_py()
        
        # 7. –û–±–Ω–æ–≤–ª—è–µ–º requirements.txt
        print("\\nüì¶ –®–∞–≥ 7: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ requirements.txt...")
        update_requirements()
        
        # 8. –°–æ–∑–¥–∞–µ–º .env.example
        print("\\nüìÑ –®–∞–≥ 8: –°–æ–∑–¥–∞–Ω–∏–µ .env.example...")
        create_env_example()
        
        print("\\n" + "=" * 50)
        print("üéâ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print("=" * 50)
        
        print("\\n‚úÖ –ß—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ:")
        print("‚Ä¢ –°–æ–∑–¥–∞–Ω—ã —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤")
        print("‚Ä¢ –°–æ–∑–¥–∞–Ω .env —Ñ–∞–π–ª —Å–æ –≤—Å–µ–º–∏ —Å–µ–∫—Ä–µ—Ç–∞–º–∏")
        print("‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω .gitignore –¥–ª—è –∑–∞—â–∏—Ç—ã —Å–µ–∫—Ä–µ—Ç–æ–≤")
        print("‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω config.py –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å .env")
        print("‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω database.py")
        print("‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω ydb_init.py")
        print("‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω python-dotenv –≤ requirements.txt")
        print("‚Ä¢ –°–æ–∑–¥–∞–Ω .env.example –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞")
        
        print("\\nüîí –í–ê–ñ–ù–û:")
        print("‚Ä¢ .env —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ —Å–µ–∫—Ä–µ—Ç—ã –∏ –ù–ï –ø–æ–ø–∞–¥–µ—Ç –≤ git")
        print("‚Ä¢ ydb_key.json —Ç–µ–ø–µ—Ä—å —Ç–æ–∂–µ –∑–∞—â–∏—â–µ–Ω .gitignore")
        print("‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º")
        print("‚Ä¢ –ü—Ä–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏ —Å–æ–∑–¥–∞–π—Ç–µ .env –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
        
        print("\\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ python-dotenv: pip install python-dotenv")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É: python config.py")
        print("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞: python bot_modular.py")
        
        print(f"\\nüíæ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏: {backup_dir}")
        
    except Exception as e:
        print(f"\\n‚ùå –û–®–ò–ë–ö–ê –ú–ò–ì–†–ê–¶–ò–ò: {e}")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")
        return False
    
    return True


if __name__ == "__main__":
    success = main()
    if success:
        print("\\nüöÄ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–µ–ø–ª–æ–∏—Ç—å –≤ Yandex Cloud!")
    else:
        print("\\nüí• –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ")