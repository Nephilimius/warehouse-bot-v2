"""
index.py - –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Yandex Cloud Functions

–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ webhook'–∏ –æ—Ç Telegram –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ—Ç –∏—Ö
–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º –∫–æ–º–∞–Ω–¥ –∏ callback'–æ–≤.
"""

import json
import logging
import os
from handlers.utils import TelegramAPI
from handlers.main_handlers import handle_text_message
from handlers.callback_router import handle_callback_query

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Cloud Functions
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def handler(event, context):
    """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Yandex Cloud Functions"""
    print("üöÄ –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–©–ï–ù–ê!")
    print(f"üì• Raw event: {event}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        token = os.environ.get('TELEGRAM_BOT_TOKEN')
        print(f"üîë Token found: {bool(token)}")
        
        if not token:
            print("‚ùå TOKEN –ù–ï –ù–ê–ô–î–ï–ù!")
            logger.error(
                "‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"
            )
            return {
                'statusCode': 500,
                'body': json.dumps({'error': 'Token not found'})
            }
        
        print("‚úÖ –°–æ–∑–¥–∞–µ–º TelegramAPI...")
        # –°–æ–∑–¥–∞–µ–º API –æ–±—ä–µ–∫—Ç
        telegram_api = TelegramAPI(token)
        print("‚úÖ TelegramAPI —Å–æ–∑–¥–∞–Ω!")
        
        # –ü–∞—Ä—Å–∏–º –≤—Ö–æ–¥—è—â–∏–π JSON
        print("üìÑ –ü–∞—Ä—Å–∏–º JSON...")
        try:
            if isinstance(event.get('body'), str):
                print("üìÑ Body - —Å—Ç—Ä–æ–∫–∞, –ø–∞—Ä—Å–∏–º JSON...")
                update_data = json.loads(event['body'])
            else:
                print("üìÑ Body - —É–∂–µ –æ–±—ä–µ–∫—Ç...")
                update_data = event.get('body', {})
                
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            return {
                'statusCode': 400,
                'body': json.dumps({'error': 'Invalid JSON'})
            }
        
        print(f"üì• Parsed update: {update_data}")
        logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω update: {update_data}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º message
        if 'message' in update_data:
            print("üí¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º MESSAGE...")
            msg = update_data['message']
            user_id = msg['from']['id']
            username = msg['from'].get('username', 'unknown')
            text = msg.get('text', '')
            
            print(f"üí¨ MESSAGE –æ—Ç @{username} (ID: {user_id}): {text}")
            logger.info(f"üí¨ MESSAGE –æ—Ç @{username}: {text[:30]}")
            
            print("üîÑ –í—ã–∑—ã–≤–∞–µ–º handle_text_message...")
            success, result = handle_text_message(
                user_id, username, text, telegram_api
            )
            print(f"üîÑ handle_text_message —Ä–µ–∑—É–ª—å—Ç–∞—Ç: success={success}, result={result}")
            
            if success:
                print("‚úÖ MESSAGE —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
                logger.info(f"‚úÖ MESSAGE –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                return {
                    'statusCode': 200,
                    'body': json.dumps({'status': 'ok', 'type': 'message'})
                }
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ MESSAGE: {result}")
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ message: {result}")
                return {
                    'statusCode': 500,
                    'body': json.dumps({'error': str(result)})
                }
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback_query
        elif 'callback_query' in update_data:
            print("üîò –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º CALLBACK...")
            cb = update_data['callback_query']
            user_id = cb['from']['id']
            username = cb['from'].get('username', 'unknown')
            callback_data = cb.get('data', '')
            message_id = cb['message']['message_id']
            query_id = cb['id']
            
            print(f"üîò CALLBACK –æ—Ç @{username} (ID: {user_id}): {callback_data}")
            logger.info(f"üîò CALLBACK –æ—Ç @{username}: {callback_data}")
            
            print("üîÑ –í—ã–∑—ã–≤–∞–µ–º handle_callback_query...")
            success, result = handle_callback_query(
                user_id, callback_data, message_id, query_id, telegram_api
            )
            print(
                f"üîÑ handle_callback_query —Ä–µ–∑—É–ª—å—Ç–∞—Ç: "
                f"success={success}, result={result}"
            )
            
            if success:
                print("‚úÖ CALLBACK —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
                logger.info(f"‚úÖ CALLBACK –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                return {
                    'statusCode': 200,
                    'body': json.dumps({'status': 'ok', 'type': 'callback'})
                }
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ CALLBACK: {result}")
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {result}")
                return {
                    'statusCode': 500,
                    'body': json.dumps({'error': str(result)})
                }
        
        else:
            update_keys = list(update_data.keys())
            print(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø update: {update_keys}")
            logger.warning(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø update: {update_keys}")
            return {
                'statusCode': 400,
                'body': json.dumps({'error': 'Unknown update type'})
            }
            
    except Exception as e:
        print(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return {
            'statusCode': 500,
            'body': json.dumps({
                'error': 'Critical error', 
                'details': str(e)
            })
        }