#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ú–æ–¥—É–ª—å–Ω—ã–π Telegram –±–æ—Ç - —á–∏—Å—Ç—ã–π webhook —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ —Ö–µ–Ω–¥–ª–µ—Ä—ã
"""

import traceback
from flask import Flask, request, jsonify
import json
import logging
import os
import time
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
from config import TOKEN

# –ò–º–ø–æ—Ä—Ç—ã —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
from handlers.utils import TelegramAPI
from handlers.main_handlers import handle_text_message
from handlers.callback_router import handle_callback_query

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
WEBHOOK_PORT = 8080
WEBHOOK_PATH = f'/{TOKEN}'

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Telegram API
telegram_api = TelegramAPI(TOKEN)


@app.before_request
def log_request():
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    if request.path == WEBHOOK_PATH:
        logger.info(f"üåê WEBHOOK: {request.method} {request.content_length or 0} bytes")


@app.route('/', methods=['GET'])
def health_check():
    """Health check"""
    return f"""
ü§ñ –ú–æ–¥—É–ª—å–Ω—ã–π Telegram Webhook

‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç —Å —á–∏—Å—Ç–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π!
üîó Webhook: {WEBHOOK_PATH}
üè† Port: {WEBHOOK_PORT}
üïí –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
‚Ä¢ –ú–æ–¥—É–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
‚Ä¢ –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –ø–æ —Ñ–∞–π–ª–∞–º
‚Ä¢ –ß–∏—Å—Ç—ã–π –∫–æ–¥ –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
‚Ä¢ –õ–µ–≥–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ

üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞:
‚Ä¢ handlers/main_handlers.py - –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
‚Ä¢ handlers/task_handlers.py - –∑–∞–¥–∞—á–∏
‚Ä¢ handlers/schedule_handlers.py - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
‚Ä¢ handlers/notification_handlers.py - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ handlers/report_handlers.py - –æ—Ç—á–µ—Ç—ã
‚Ä¢ handlers/admin_handlers.py - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è
‚Ä¢ handlers/callback_router.py - —Ä–æ—É—Ç–∏–Ω–≥
"""


@app.route('/health', methods=['GET'])
def health_json():
    """JSON health check"""
    return jsonify({
        "status": "healthy",
        "architecture": "modular_handlers",
        "webhook_path": WEBHOOK_PATH,
        "port": WEBHOOK_PORT,
        "timestamp": datetime.now().isoformat()
    })


@app.route(WEBHOOK_PATH, methods=['POST'])
def webhook():
    """–ß–∏—Å—Ç—ã–π webhook —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º JSON
        json_data = request.get_json()
        if not json_data:
            logger.error("‚ùå –ü—É—Å—Ç–æ–π JSON")
            return "No JSON", 400
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º message
        if 'message' in json_data:
            msg = json_data['message']
            user_id = msg['from']['id']
            username = msg['from'].get('username', 'unknown')
            text = msg.get('text', '')
            
            logger.info(f"üí¨ MSG @{username}: {text[:30]}")
            
            success, result = handle_text_message(user_id, username, text, telegram_api)
            
            if success:
                logger.info(f"‚úÖ MESSAGE –æ—Ç @{username} –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                return "OK", 200
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ message: {result}")
                return "Error", 500
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback_query
        elif 'callback_query' in json_data:
            cb = json_data['callback_query']
            user_id = cb['from']['id']
            username = cb['from'].get('username', 'unknown')
            callback_data = cb.get('data', '')
            message_id = cb['message']['message_id']
            query_id = cb['id']
            
            logger.info(f"üîò CB @{username}: {callback_data}")
            
            success, result = handle_callback_query(
                user_id, callback_data, message_id, query_id, telegram_api
            )
            
            if success:
                logger.info(f"‚úÖ CALLBACK –æ—Ç @{username} –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                return "OK", 200
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ callback: {result}")
                return "Error", 500
        
        else:
            logger.warning(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø: {list(json_data.keys())}")
            return "Unknown update", 400
            
    except Exception as e:
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        traceback.print_exc()
        return "Critical error", 500


def setup_webhook():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"""
    try:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∞–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ngrok
        print("üîó –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ngrok:")
        print(f"   ngrok http {WEBHOOK_PORT}")
        print(f"   –ó–∞—Ç–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ webhook –Ω–∞ Telegram")
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook: {e}")
        return False


if __name__ == '__main__':
    print("üöÄ –ó–ê–ü–£–°–ö –ú–û–î–£–õ–¨–ù–û–ì–û –ë–û–¢–ê")
    print("=" * 40)
    print()
    
    try:
        print("üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:")
        print("   ‚úÖ –ú–æ–¥—É–ª—å–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã")
        print("   ‚úÖ –ß–∏—Å—Ç–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏")
        print("   ‚úÖ –õ–µ–≥–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ")
        print("   ‚úÖ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è")
        print()
        print(f"üè† Host: 0.0.0.0:{WEBHOOK_PORT}")
        print(f"üîó Webhook: {WEBHOOK_PATH}")
        print()
        
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
        setup_webhook()
        
        print("‚úÖ –ó–∞–ø—É—Å–∫ Flask...")
        
        app.run(
            host='0.0.0.0',
            port=WEBHOOK_PORT,
            debug=False,
            use_reloader=False,
            threaded=True
        )
        
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞...")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        print("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
